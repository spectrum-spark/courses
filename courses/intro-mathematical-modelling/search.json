[
  {
    "objectID": "session4_covid_thailand_seir_model/session4_covid_thailand_seir_model.html",
    "href": "session4_covid_thailand_seir_model/session4_covid_thailand_seir_model.html",
    "title": "Fitting models in R",
    "section": "",
    "text": "Thanks to Lisa White, and Ben Cooper, Nuffield Department of Medicine, Oxford University and\nMichael Meehan, Australian Institute of Tropical Health & Medicine, James Cook University.\nAdapted and presented by Emma McBryde, Australian Institute of Tropical Health & Medicine, James Cook University\nJuly 2022",
    "crumbs": [
      "Fitting models in R"
    ]
  },
  {
    "objectID": "session4_covid_thailand_seir_model/session4_covid_thailand_seir_model.html#code-summary",
    "href": "session4_covid_thailand_seir_model/session4_covid_thailand_seir_model.html#code-summary",
    "title": "Fitting models in R",
    "section": "Code summary",
    "text": "Code summary\nIt is good practice to write a short description of your code to summarise its purpose for future users. Below is an example of such a description. Open R studio, create a new file and copy and paste the code chunk below into your editor to start writing your own code:\n# SPARK Modelling Short course\n# 2023 Infectious Diseases Modelling\n\n#########################################\n## Modelling Thailand's COVID outbreak ##\n#########################################\nSave this file in your student_materials folder, and give it a meaningful name, like session_seir_ode_covid.",
    "crumbs": [
      "Fitting models in R"
    ]
  },
  {
    "objectID": "session4_covid_thailand_seir_model/session4_covid_thailand_seir_model.html#library-loading-and-importing-data",
    "href": "session4_covid_thailand_seir_model/session4_covid_thailand_seir_model.html#library-loading-and-importing-data",
    "title": "Fitting models in R",
    "section": "Library loading and importing data",
    "text": "Library loading and importing data\nWe’ll need three libraries for this session:\n\nlibrary(dplyr)\nlibrary(deSolve)\nlibrary(ggplot2)\n\nand some data\n\nfirst_wave &lt;- read.csv(\"first_wave_TH.csv\", colClasses = c(\"Date\", \"numeric\", \"numeric\"))\n# Convert dates\nfirst_wave$Date &lt;- as.Date(first_wave$Date, format = \"%Y-%m-%d\")\n\nsummary(first_wave)\n\n      Date                Cases        Cumulative_cases\n Min.   :2020-01-01   Min.   :  0.00   Min.   :   0    \n 1st Qu.:2020-02-15   1st Qu.:  0.00   1st Qu.:  34    \n Median :2020-03-31   Median :  2.00   Median :1711    \n Mean   :2020-03-31   Mean   : 17.42   Mean   :1535    \n 3rd Qu.:2020-05-15   3rd Qu.: 11.00   3rd Qu.:3025    \n Max.   :2020-06-30   Max.   :188.00   Max.   :3171",
    "crumbs": [
      "Fitting models in R"
    ]
  },
  {
    "objectID": "session4_covid_thailand_seir_model/session4_covid_thailand_seir_model.html#define-the-model-parameters",
    "href": "session4_covid_thailand_seir_model/session4_covid_thailand_seir_model.html#define-the-model-parameters",
    "title": "Fitting models in R",
    "section": "Define the model parameters",
    "text": "Define the model parameters\nAll our parameters have to go in a single structure, either a vector or a list. Today, we’ll use a named vector\n\nparameters &lt;- c(\n    R0 = 4,\n    latent_period = 5,\n    infectious_period = 6\n)\n\nThe parameters for the model are frequently estimated either from literature or from the data given the model and other parameters of the model (stay tuned for more on this). The flows are often represented by some Greek symbols, but it is often better to have more meaningful names as we have done here.\nComplete the following table using information about the natural history of COVID-19 infection:\n\n\n\n\n\n\n\n\n\nParameter\nFlow transformation\nValue/Range\nUnits\n\n\n\n\nBasic reproduction number\n\n\n\n\n\nLatent period\n\n\n\n\n\nDuration of infection\n\n\n\n\n\nDuration of immunity\n\n\n\n\n\n\nType parameters in your console. What do you see?\n\nType `parameters[“R0”] into your console. What does this value mean?",
    "crumbs": [
      "Fitting models in R"
    ]
  },
  {
    "objectID": "session4_covid_thailand_seir_model/session4_covid_thailand_seir_model.html#set-up-the-initial-conditions-and-model-variables",
    "href": "session4_covid_thailand_seir_model/session4_covid_thailand_seir_model.html#set-up-the-initial-conditions-and-model-variables",
    "title": "Fitting models in R",
    "section": "Set up the initial conditions and model variables",
    "text": "Set up the initial conditions and model variables\nCopy and paste the chunk below into your script to continue model development:\n\n# Initial conditions\nTotal_population &lt;- 6.6e7\nInitial_exposed &lt;- 0\nInitial_infected &lt;- 20\nInitial_recovered &lt;- 0\nInitial_susceptible &lt;- Total_population - Initial_exposed - Initial_infected - Initial_recovered\n\n# State variables\nstate &lt;- c(\n    Susceptible = Initial_susceptible,\n    Exposed = Initial_exposed,\n    Infectious = Initial_infected,\n    Recovered = Initial_recovered\n)\n\nWe also need to define the start and end time for the model simulation:\n\n# Time window\nstart_date &lt;- as.Date(\"2020-03-07\")\nend_date &lt;- as.Date(\"2020-03-26\")\ntimes &lt;- seq(start_date, end_date, by = 1)",
    "crumbs": [
      "Fitting models in R"
    ]
  },
  {
    "objectID": "session4_covid_thailand_seir_model/session4_covid_thailand_seir_model.html#setting-up-the-function-to-solve-equations",
    "href": "session4_covid_thailand_seir_model/session4_covid_thailand_seir_model.html#setting-up-the-function-to-solve-equations",
    "title": "Fitting models in R",
    "section": "Setting up the function to solve equations",
    "text": "Setting up the function to solve equations\nJust as we did for session 2, we can write functions to evaluate our system of equations, which we will need to use for the ODE solver. The SEIR model we’re going to use here is more complicated than we’ve seen, but work through it slowly and make sure it all makes sense.\n\n# Model function\nCOVID.base &lt;- function(t, state, parameters) {\n    with(as.list(c(state, parameters)), {\n        # Calculate the total population size\n        Total_population &lt;- Susceptible + Exposed + Infectious + Recovered\n\n        # Calculate the average force of infection imposed on each susceptible individual\n        force_of_infection &lt;- R0 * Infectious / (Total_population * infectious_period)\n\n        # Calculate the net (instantaneous) change in each state variable\n        Susceptible_change &lt;- -force_of_infection * Susceptible\n        Exposed_change &lt;- force_of_infection * Susceptible - Exposed / latent_period\n        Infectious_change &lt;- Exposed / latent_period - Infectious / infectious_period\n        Recovered_change &lt;- Infectious / infectious_period\n\n        # Return net changes as list\n        return(list(\n            c(\n                Susceptible_change,\n                Exposed_change,\n                Infectious_change,\n                Recovered_change\n            )\n        ))\n    })\n}\n\nWhat is the name of our function and what are the inputs and outputs?\n\nWhat is the rate of movement out of state E?\n\nWhat is the rate of movement out of state I?\n\nWhat is the formula for \\(\\lambda\\), known as the force of infection?\n\nExplain the different components of the force of infection.",
    "crumbs": [
      "Fitting models in R"
    ]
  },
  {
    "objectID": "session4_covid_thailand_seir_model/session4_covid_thailand_seir_model.html#run-and-plot-the-model",
    "href": "session4_covid_thailand_seir_model/session4_covid_thailand_seir_model.html#run-and-plot-the-model",
    "title": "Fitting models in R",
    "section": "Run and plot the model",
    "text": "Run and plot the model\nCopy the following chunk into your script to solve the ODE\n\n# Solve model\nout &lt;- ode(y = state, times = as.numeric(times - times[1]), func = COVID.base, parms = parameters)\n# Plot solution\npar(mar = c(1, 1, 1, 1)) # reduce the margins of the plot in order to fit it in the panel\nplot(out)\n\n\n\n\n\n\n\n\nExplain how each of the variables S, E, I and R can be measured in the field.\n\nDefine incidence and prevalence, and discuss the differences between them.",
    "crumbs": [
      "Fitting models in R"
    ]
  },
  {
    "objectID": "session4_covid_thailand_seir_model/session4_covid_thailand_seir_model.html#post-process-the-model-output-to-predict-standard-epidemiological-metrics",
    "href": "session4_covid_thailand_seir_model/session4_covid_thailand_seir_model.html#post-process-the-model-output-to-predict-standard-epidemiological-metrics",
    "title": "Fitting models in R",
    "section": "Post-process the model output to predict standard epidemiological metrics",
    "text": "Post-process the model output to predict standard epidemiological metrics\nThis is great, but as we’ve seen before, the output from ode can be a bit unwieldy. Let’s write a function that can clean it up for us.\n\ntidy_base_model &lt;- function(ode_output, times, parameters) {\n    as.data.frame(ode_output) %&gt;%\n        mutate(\n            Prevalence = Exposed + Infectious,\n            Incidence = Exposed / parameters[\"latent_period\"],\n            Cumulative_incidence = cumsum(Incidence),\n            Population = Susceptible + Exposed + Infectious + Recovered,\n            Date = times\n        )\n}\n\ntidied_output &lt;- tidy_base_model(out, times, parameters)\n\nWhat is the formula for incidence?\n\nWrite down an equation for prevalence and the corresponding R code.\n\nWhy do we choose to plot incidence?",
    "crumbs": [
      "Fitting models in R"
    ]
  },
  {
    "objectID": "session4_covid_thailand_seir_model/session4_covid_thailand_seir_model.html#plot-the-total-population-size-and-predicted-prevalence-and-incidence",
    "href": "session4_covid_thailand_seir_model/session4_covid_thailand_seir_model.html#plot-the-total-population-size-and-predicted-prevalence-and-incidence",
    "title": "Fitting models in R",
    "section": "Plot the total population size, and predicted prevalence and incidence",
    "text": "Plot the total population size, and predicted prevalence and incidence\nIt’s time to plot our solution, and make sure we haven’t made any silly mistakes.\n\nggplot() +\n    geom_line(aes(x = Date, y = Prevalence), data = tidied_output, linewidth = 1, colour = \"firebrick\") +\n    labs(x=\"Date\", y=\"Modelled Prevalence\") +\n    ggtitle(\"Thailand's First Wave, Jan-Jul 2020\") +\n    theme_bw()\n\n\n\n\n\n\n\nggplot() +\n    geom_line(aes(x = Date, y = Population), data = tidied_output, linewidth = 1, colour = \"firebrick\") +\n    ggtitle(\"Thailand's First Wave, Jan-Jul 2020\") +\n    labs(x=\"Date\", y=\"Total Population\") +\n    ggtitle(\"Thailand's First Wave, Jan-Jul 2020\") +\n    theme_bw()\n\n\n\n\n\n\n\n\nWhat is the sum of all the differential equations for the COVID-19 model?\n\nWhy do we choose to plot the population size over time?",
    "crumbs": [
      "Fitting models in R"
    ]
  },
  {
    "objectID": "session4_covid_thailand_seir_model/session4_covid_thailand_seir_model.html#compare-the-model-with-the-data",
    "href": "session4_covid_thailand_seir_model/session4_covid_thailand_seir_model.html#compare-the-model-with-the-data",
    "title": "Fitting models in R",
    "section": "Compare the model with the data",
    "text": "Compare the model with the data\n\n# Compare the solution with the data\n# Incidence\nggplot(first_wave) +\n  geom_col(aes(x=Date, y=Cases), width=1, fill=NA, colour=\"black\") +\n  geom_point(data=tidied_output, aes(x=Date, y=Incidence), size=2, colour=\"firebrick\") +\n  ylab(\"Daily cases\") +\n  xlab(\"\") +\n  ggtitle(\"Model-predicted incidence\") +\n  theme_bw()\n\n\n\n\n\n\n\n# Cumulative incidence\nggplot(first_wave) +\n  geom_line(aes(x=Date, y=Cumulative_cases), linewidth=2, colour=\"skyblue\") +\n  geom_point(data=tidied_output, aes(x=Date, y=Cumulative_incidence), size=2, colour=\"firebrick\") +\n  ylab(\"Cumulative cases\") +\n  xlab(\"\") +\n  ggtitle(\"Model-predicted cumulative incidence\") +\n  theme_bw()        \n\n\n\n\n\n\n\n\nVary the value of \\(R_0\\) and re-run the model. What value of \\(R_0\\) do you think is most realistic?\n\nPerhaps the number of people who seeded the outbreak was smaller or larger. How can you explore that using the code and would that change your estimate for \\(R_0\\)?\n\nWhat is the difference between the first and second graphs, and why should we plot these?\n\nTry changing the end times and re-running the model:\n\nstart_date = as.Date(\"2020-03-07\")\nend_date = as.Date(\"2020-04-26\")\ntimes_long = seq(start_date, end_date, by=1)\n\nlong_out &lt;- ode(y = state, times = as.numeric(times_long - times_long[1]), func = COVID.base, parms = parameters)\ntidied_long &lt;- tidy_base_model(long_out, times_long, parameters)\n\nWhy would we do this?",
    "crumbs": [
      "Fitting models in R"
    ]
  },
  {
    "objectID": "session2_differential_equations_in_r/session2_differential_equations_in_r.html",
    "href": "session2_differential_equations_in_r/session2_differential_equations_in_r.html",
    "title": "Differential Equations in R",
    "section": "",
    "text": "Developed by Michael Meehan and Rhondda Jones\nPresented by Michael Lydeamore and Eamon Conway\nJuly 2022",
    "crumbs": [
      "Differential Equations in R"
    ]
  },
  {
    "objectID": "session2_differential_equations_in_r/session2_differential_equations_in_r.html#differential-equations",
    "href": "session2_differential_equations_in_r/session2_differential_equations_in_r.html#differential-equations",
    "title": "Differential Equations in R",
    "section": "Differential equations",
    "text": "Differential equations\nDifferential equations are equations that describe the rate of change of some quantity (or quantities) with respect to an independent variable, typically time or space. For example, the rate per unit time at which chemical compounds are formed in chemical reactions, or at which heat dissipates from an object can often be described by systems of differential equations.\nThe package deSolve is used to solve systems of initial value problem differential equations within the R programming language. The package is based on previously developed FORTRAN routines and many deSolve functions are wrappers around existing FORTRAN codes.\nAs described in the deSolve introductory manual, differential equations are implemented and solved in R through two separate steps: model specification and model application. In the first step, model specification, the user is required to define the model parameters and state variables and implement the derivative function. In the next step, model application, the user specifies a time lattice upon which the solution to the differential equation should be returned and integrates the differential equations using the functions available in the deSolve package.\nIn this chapter we will implement several examples of systems of differential equations and use the deSolve package in R to solve them. (See deSolve manual.)",
    "crumbs": [
      "Differential Equations in R"
    ]
  },
  {
    "objectID": "session2_differential_equations_in_r/session2_differential_equations_in_r.html#simple-example-population-growth",
    "href": "session2_differential_equations_in_r/session2_differential_equations_in_r.html#simple-example-population-growth",
    "title": "Differential Equations in R",
    "section": "Simple example: population growth",
    "text": "Simple example: population growth\nTo guide you through the model specification and application steps described above, we will start with an easy example: modelling population growth. One of the simplest models of population growth is the Malthusian model which assumes that a population of size \\(N(t)\\) grows at a rate proportional to its current size. That is, the growth rate per unit time of the population size obeys the relation\n\\[\\frac{dN(t)}{dt} \\propto N(t)\\]\n(where the symbol \\(\\propto\\) means “is proportional to”). In this case, the larger the current population size \\(N(t)\\), the faster it grows.\nWe can convert the proportionality relation given above into a standard differential equation by introducing the population growth rate \\(r\\):\n\\[\\frac{dN(t)}{dt} = rN(t)\\]\nThis differential equation is one dimensional, ie it has only one state variable: \\(N(t)\\); and it has a single parameter: the growth rate \\(r\\). Note that in this example, and those that follow, we will always include the time dependence of state variables to help distinguish them from model parameters.\nIn order to fully specify the model mathematically we must provide an initial condition, ie the population size \\(N\\) at time \\(t=0\\), which we denote as \\(N(t=0)=N_0\\). Here we take\n\\[\\begin{align}\nr &= 2 \\\\\nN_0 &= 1\n\\end{align}\\]\nGiven values for the growth rate \\(r\\) and the initial population size \\(N_0\\) we can now integrate (ie solve) our differential equation to determine the population size \\(N(t)\\) at future times \\(t&gt;0\\).\n\nLibrary loading\nBefore doing anything else, let’s install the deSolve package and then load it into our workspace. We’ll also need the tidyverse, which is a bunch of packages that make working with data a bit easier in R.\n\nlibrary(deSolve)\nlibrary(tidyverse)\n\nIf you get an error while trying to load the package, make sure to install it through RStudio.\n\n\nSetting up the differential equation\nThe first step in solving a differential equation in deSolve is to specify our model parameters and initialize our state variables\n\n# Define model parameters and store values in a labelled vector\nparameters &lt;- c(r = 2) # Growth rate\n\n# Specify the initial conditions, define state variables and assign initial values\ninitN &lt;- 1 # Start with an initial population size N(0) = 1\nstate &lt;- c(N = initN) # Specify the state variables and initialize them to their initial values\n\nThe model parameters, which in this case is just the growth rate \\(r\\), have been stored in the labelled vector parameters; and the state variables and their initial conditions have been defined in the vector state. Here we have been careful to ensure that the parameter and state variables are stored as vectors with assigned names and values.\nNext, we specify the model differential equation (given above) as a user-defined R function:\n\n# We specify the system of differential equations as a function in R\n# Here we specify a function with three arguments:\n# 1. t : time, which is the dependent variable in our case\n# 2. state : a vector of state variables\n# 3. parameters : a vector of parameters (ie fixed variables)\npopmodel_exponentialgrowth &lt;- function(t, state, parameters) {\n    # Initialize an environment with the elements of state and parameters as local variables\n    with(as.list(c(state, parameters)), {\n        dNdt &lt;- r * N # The model equation\n        list(c(dNdt)) # Return the population growth rate dNdt\n    })\n}\n\nIn the function definition given above we have used the with(as.list(c(state, parameters),{...}) statement to create an environment that allows us to access the state and parameter variables directly by name within our function popmodel_exponentialgrowth. If we didn’t use with, then we would have to refer to all of our parameters and states using the name notation, such as parameters['r'].\nThe user-defined function popmodel_exponentialgrowth, which calculates and returns the rate of change of each of our state variables, is the function that we will pass to ode from deSolve in order to solve the differential equation. However, before we can do this, we first need to specify a time lattice over which we wish our solution to our differential equation to be returned:\n\n# Start with an initial time of t=0 and solve up to t=5 with time increments of 0.01\ntimes &lt;- seq(from = 0, to = 5, by = 0.01)\n\nNote that the sequence of times defined here by the user only specifies the lattice points at which we require an estimate of the solution, in this case the population size. In general, if the times sequence consists of time points t1, t2, t3, … the ode solver will return an estimate of the solution N(t1), N(t2), N(t3), .... Importantly, the vector times is not related to the time step used by the numerical integration routine adopted by the ode solver in ode.\nWe now have all of the ingredients we require to solve our simple population growth model and are ready to call the ode integration function:\n\n# Here we specify four arguments of the ode function:\n# 1. y : the state variables\n# 2. times : the time lattice over which we solve the differential equation\n# 3. func : our differential equation given in terms of our state variables and model parameters\n# 4. parms : our model parameters\nout &lt;- ode(y = state, times = times, func = popmodel_exponentialgrowth, parms = parameters)\n\nIn the code above we call the ode function to numerically integrate our differential equation popmodel_exponentialgrowth and store the solution in the deSolve object out. To view the first few lines of output we can type\n\nhead(out)\n\n     time        N\n[1,] 0.00 1.000000\n[2,] 0.01 1.020202\n[3,] 0.02 1.040812\n[4,] 0.03 1.061839\n[5,] 0.04 1.083289\n[6,] 0.05 1.105173\n\n\nHere we see that the solution \\(N(t)\\) is given at each time point specified in the time lattice times, ie at intervals of \\(\\Delta t=0.01\\) from \\(t=0\\) up to \\(t=10\\). Notice that the first value of the solution \\(N\\) at time \\(t=0\\) is the initial value we specified above, initN = 1.\n\n\nPlotting the solution\nggplot doesn’t know how to deal with deSolve outputs directly, so we have to turn it into a data.frame using as.data.frame. Then, having done that, we can map our x and y axes and plot the solution:\n\nggplot(data = as.data.frame(out), aes(x=time, y=N)) +\n    geom_line() +\n    labs(x = \"Time, t\", y=\"Population size, N(t)\")\n\n\n\n\n\n\n\n\nThe plotted solution shows a population that grows exponentially with time rapidly increasing in size to &gt;20,000 individuals.\nUsing the solution provided by the ode() function call and returned in the object out, determine the time interval during which the population size \\(N\\) exceeded 1000.\n\nIt is important to realize that rounding errors are inevitable during numerical integration and there is no guarantee that the solution generated by the ode function is accurate. Therefore, whenever possible, you should always validate your solution with known analytical results or approximations. Fortunately for our case, an exact analytical solution to the differential equation given above exists:\n\\[\\frac{dN(T)}{dt} = rN(t) \\quad \\Rightarrow \\quad N(t) = N_0 e^{rt}\\]\nwhere \\(e\\) is Euler’s number (=2.718282…). Given this analytical solution we can check the accuracy of our numerical solution by plotting the two solutions on the same graph:\n\n# Create a coarse time lattice for display purposes\ntimes_coarse &lt;- seq(from = 0, to = 5, by = 1)\n# Calculate the exact solution given the model parameters and initial conditions\nNexact &lt;- initN * exp(parameters[\"r\"] * times_coarse)\n\nexact_solution &lt;- data.frame(time = times_coarse, Nexact)\n\nggplot() +\n    geom_line(data = as.data.frame(out), aes(x=time, y=N, colour=\"Numeric\")) +\n    geom_point(data = exact_solution, aes(x=time, y=Nexact, colour=\"Exact\")) +\n    labs(x = \"Time, t\", y=\"Population size, N(t)\", colour=\"\") +\n    scale_color_manual(values=c(\"red\",\"black\"))\n\n\n\n\n\n\n\n\nFrom the figure above we can see that the numerical solution obtained using the ode function (and its default parameter settings) provides a very accurate approximation of the exact model solution.\nRepeat your earlier calculation for the time taken for \\(N(t)&gt;1000\\), this time using the exact analytical solution for the population size \\(N(t)\\). Compare your answer with the numerical result.\n\nWhen exact, or even approximate analytical solutions are not available, another way to validate your numerical solution is by decreasing the time step to see if the solution varies substantially. If the solution is stable, eventually you should notice very little difference in the numerical solution as you continually decrease the time step, ie it should converge. This can be adjusted in the ode function using the rtol and atol parameters which set the relative and absolute error tolerances accepted during the integration routine (see deSolve manual.)",
    "crumbs": [
      "Differential Equations in R"
    ]
  },
  {
    "objectID": "session2_differential_equations_in_r/session2_differential_equations_in_r.html#exercise-the-sir-epidemic-model",
    "href": "session2_differential_equations_in_r/session2_differential_equations_in_r.html#exercise-the-sir-epidemic-model",
    "title": "Differential Equations in R",
    "section": "Exercise: The SIR epidemic model",
    "text": "Exercise: The SIR epidemic model\nTo model the spread of infectious diseases it is common to split the population up into three disease states: \\(S\\), susceptible to infection; \\(I\\), infected and infectious; \\(R\\), recovered. During an outbreak the rates of change of each of these three populations can be described using the following system of (coupled) differential equations:\n\\[\\begin{align}\n    \\frac{dS(t)}{dt}&=-\\beta \\frac{S(t)}{N}I(t)\\\\\n    \\frac{dI(t)}{dt}&=\\beta \\frac{S(t)}{N}I(t)-\\gamma I(t)\\\\\n    \\frac{dR(t)}{dt}&=\\gamma I(t).\n\\end{align}\\]\nThis system is known as the SIR model of disease transmission and contains two parameters: the infection transmission rate, \\(\\beta\\); and the recovery rate, \\(\\gamma\\).\nTaking parameter values\n\\[\\begin{align}\n    \\beta&=5\\\\\n    \\gamma&=1\n\\end{align}\\]\nand initial conditions\n\\[\\begin{align}\n    S_0 &= 199\\\\\n    I_0 &= 1\\\\\n    R_0 &= 0\n\\end{align}\\]\nsolve the SIR model following the same steps described above for the predator-prey model. Plot your solution to generate the following figure:",
    "crumbs": [
      "Differential Equations in R"
    ]
  },
  {
    "objectID": "session5_fitting_models_in_r/session5_fitting_models_in_r.html",
    "href": "session5_fitting_models_in_r/session5_fitting_models_in_r.html",
    "title": "Modelling an outbreak - COVID-19 in Thailand",
    "section": "",
    "text": "Thanks to Lisa White, Nuffield Department of Medicine, Oxford University,\nMichael Meehan, and Emma McBryde, Australian Institute of Tropical Health & Medicine, James Cook University.\nAdapted and presented by Eamon Conway, The Walter and Eliza Hall Institute, Melbourne.\n\nMarch 2023",
    "crumbs": [
      "Modelling an outbreak - COVID-19 in Thailand"
    ]
  },
  {
    "objectID": "session5_fitting_models_in_r/session5_fitting_models_in_r.html#questions",
    "href": "session5_fitting_models_in_r/session5_fitting_models_in_r.html#questions",
    "title": "Modelling an outbreak - COVID-19 in Thailand",
    "section": "Questions",
    "text": "Questions\nWhat are the residuals?\n\nWhat disadvantages might there be of fitting models by hand like this?\n\nCan you think of a simple algorithm for searching over all the parameters and finding those that give the best fitting model?\n\nIn the example we have been minimizing the sum of squares of the residuals. What would be the effect if we decided to minimize the sums of the absolute values of the residuals? Would you expect to get the same answer?",
    "crumbs": [
      "Modelling an outbreak - COVID-19 in Thailand"
    ]
  },
  {
    "objectID": "session5_fitting_models_in_r/session5_fitting_models_in_r.html#filtering-the-data",
    "href": "session5_fitting_models_in_r/session5_fitting_models_in_r.html#filtering-the-data",
    "title": "Modelling an outbreak - COVID-19 in Thailand",
    "section": "Filtering the data",
    "text": "Filtering the data\nWhen calibrating each of these parameters, one thing we must be careful of is to account for the introduction of various interventions as these will likely have a significant impact on the parameter values (the reproduction number in particular). Therefore, in the code provided below I first isolate the “pre-intervention” era (which we defined in the last session as the first wave between 7th and 26th March 2020. We will use this truncated dataset to estimate the parameters, \\(R_0\\) and initial_infected_population. The code below should let you view the data we are using to fit the model.\n\n# Data imports and filtering\nfirst_wave &lt;- read.csv(\"first_wave_TH.csv\", colClasses = c(\"Date\", \"numeric\", \"numeric\"))\n# fixing the format of date\nfirst_wave$Date &lt;- as.Date(first_wave$Date, format = \"%Y-%m-%d\")\n# Time window\nstart_date &lt;- as.Date(\"2020-03-07\")\nend_date &lt;- as.Date(\"2020-03-26\")\n\n# Filter data to capture period prior to interventions. This has already been done in the last session.\nuncontrolled_period &lt;- first_wave %&gt;%\n    filter(Date &gt;= start_date, Date &lt;= end_date)\n\n# Plot the filtered data\nggplot(uncontrolled_period) +\n    geom_col(aes(x = Date, y = Cases), width = 1, fill = \"dodgerblue2\", colour = \"blue\") +\n    ylab(\"Daily cases\") +\n    xlab(\"\") +\n    ggtitle(\"Uncontrolled first wave of COVID-19 in Thailand 1st to 24th March, 2020\") +\n    theme_bw()\n\n\n\n\n\n\n\n\nWe’ll re-use the functions from the last session\n\n## Define model as per the previous session\n# Time window\ntimes &lt;- seq(start_date, end_date, by = 1)\n\n# Model parameters\nparameters &lt;- c(\n    R0 = 4,\n    latent_period = 5,\n    infectious_period = 6\n)\n\n# Initial conditions\nTotal_population &lt;- 6.6e7 # Population of Thailand\nInitial_exposed &lt;- 0\nInitial_infectious &lt;- 20 # Initial infectious seed\nInitial_recovered &lt;- 0\nInitial_susceptible &lt;- Total_population - Initial_exposed - Initial_infectious - Initial_recovered\n\n# State variables\nstate &lt;- c(\n    Susceptible = Initial_susceptible,\n    Exposed = Initial_exposed,\n    Infectious = Initial_infectious,\n    Recovered = Initial_recovered\n)\n\n\n# Model function\nCOVID.base &lt;- function(t, state, parameters) {\n    with(as.list(c(state, parameters)), {\n        # Calculate the total population size\n        Total_population &lt;- Susceptible + Exposed + Infectious + Recovered\n\n        # Calculate the average force of infection imposed on each susceptible individual\n        force_of_infection &lt;- R0 * Infectious / (Total_population * infectious_period)\n\n        # Calculate the net (instantaneous) change in each state variable\n        Susceptible_change &lt;- -force_of_infection * Susceptible\n        Exposed_change &lt;- force_of_infection * Susceptible - Exposed / latent_period\n        Infectious_change &lt;- Exposed / latent_period - Infectious / infectious_period\n        Recovered_change &lt;- Infectious / infectious_period\n\n        # Return net changes as list\n        return(list(\n            c(\n                Susceptible_change,\n                Exposed_change,\n                Infectious_change,\n                Recovered_change\n            )\n        ))\n    })\n}\n\nsolve.base.model &lt;- function(y_ = state,\n                             times_ = times,\n                             func. = COVID.base,\n                             parms_ = parameters) {\n    out &lt;- ode(\n        y = y_,\n        times = as.numeric(times_ - times_[1]),\n        func = func.,\n        parms = parms_\n    )\n\n    # Calculate the prevalence, incidence and cumulative incidence (for comparison with data)\n    out &lt;- as.data.frame(out) %&gt;%\n        mutate(\n            Prevalence = Exposed + Infectious,\n            Incidence = Exposed / parms_[\"latent_period\"],\n            Cumulative_incidence = cumsum(Incidence) + Incidence[1],\n            Population = Susceptible + Exposed + Infectious + Recovered,\n            Date = times_\n        )\n\n    return(out)\n}",
    "crumbs": [
      "Modelling an outbreak - COVID-19 in Thailand"
    ]
  },
  {
    "objectID": "session5_fitting_models_in_r/session5_fitting_models_in_r.html#solving-the-model-for-a-specific-set-of-parameters",
    "href": "session5_fitting_models_in_r/session5_fitting_models_in_r.html#solving-the-model-for-a-specific-set-of-parameters",
    "title": "Modelling an outbreak - COVID-19 in Thailand",
    "section": "Solving the model for a specific set of parameters",
    "text": "Solving the model for a specific set of parameters\nNow we use the model developed in the last session and solve the model for an initial set of parameters, an initial state and using dates from 7th - 26th March, 2020\n\n# now we use the model developed in the last session and solve it\n# for an initial set of parameters, an initial state and using times\n# from just 7th - 26th  of March 2020\nout_init &lt;- solve.base.model(\n    y_ = state,\n    times_ = times,\n    func. = COVID.base,\n    parms_ = parameters\n)\n\n# Plot the filtered data and the first model \"guess\"\nggplot(uncontrolled_period) +\n    geom_col(aes(x = Date, y = Cases), width = 1, fill = \"dodgerblue2\", colour = \"blue\") +\n    geom_point(data = out_init, aes(x = Date, y = Incidence), size = 2, colour = \"firebrick2\") +\n    ylab(\"Daily cases\") +\n    xlab(\"\") +\n    ggtitle(\"Thailand's First Wave, Jan-Jul 2020\") +\n    theme_bw()",
    "crumbs": [
      "Modelling an outbreak - COVID-19 in Thailand"
    ]
  },
  {
    "objectID": "session5_fitting_models_in_r/session5_fitting_models_in_r.html#calculating-distance-between-the-model-and-data",
    "href": "session5_fitting_models_in_r/session5_fitting_models_in_r.html#calculating-distance-between-the-model-and-data",
    "title": "Modelling an outbreak - COVID-19 in Thailand",
    "section": "Calculating “distance” between the model and data",
    "text": "Calculating “distance” between the model and data\nWe can use the model output, stored in out_init to assess model fit. We can use sum of squares of the difference between the data and the model.\n\n# find the sum of the residuals squared for day 2 until day 24\nSSQ_initial &lt;- sum((uncontrolled_period$Cases[-1] - out_init$Incidence[-1])^2)\nSSQ_initial\n\n[1] 24516.09\n\n\nIf we were to minimise SSQ_initial, given our parameters \\(R_0\\) and \\(I(t=0)\\) we can argue that we have found our parameters of interest.",
    "crumbs": [
      "Modelling an outbreak - COVID-19 in Thailand"
    ]
  },
  {
    "objectID": "session5_fitting_models_in_r/session5_fitting_models_in_r.html#transforming-the-parameters",
    "href": "session5_fitting_models_in_r/session5_fitting_models_in_r.html#transforming-the-parameters",
    "title": "Modelling an outbreak - COVID-19 in Thailand",
    "section": "Transforming the parameters",
    "text": "Transforming the parameters\nBefore launching into a minimisation of our SSQ function across all parameter space for the values of \\(R_0\\) and \\(I(t=0)\\), it would behoove us to pause and plan our search carefully. We will use the optim() function to minimize our function, but we should be cognisant of the fact that this function searches over all conceivable values of the parameters (i.e., from \\(-\\infty\\) to \\(\\infty\\)).\nWhat are the feasible ranges of values for our two parameters: \\(R_0\\) and \\(I(t=0)\\)?\n\nWith this in mind, it would be sensible to restrict our search to only those values of parameters that are feasible. Not only should this increase the speed of the algorithm (hopefully leading to the desired answer more quickly) but may also help us avoid any computational errors that might arise which will kill our search prematurely. For this purpose, we introduce a set of transformed parameters, that is parameters that exist in the full interval \\(-\\infty\\) to \\(\\infty\\), but can be mapped back to our feasible regions for our parameters.\n\n\n\n\n\n\nTransforming variables\n\n\n\noptim() is going to pass parameter values into our function on the interval \\((-\\infty,\\infty)\\). Is there a function that will take those parameter values and put them on the interval \\([0,\\infty)\\)?\nIf \\(x \\in (-\\infty,\\infty)\\), then \\(\\exp(x) \\in [0,\\infty)\\). Therefore if we know \\(R_0\\) and \\(I(t=0)\\), we would use \\(\\log\\) to transform back into the optim() space. If we want the opposite we can use \\(\\exp\\).\n\n\n\n# transform the parameters\n# The search / optimization algorithm we employ searches over\n# the range (-Inf, Inf) for each variable. In our application\n# we are only interested in solutions in the range (0, Inf)\n# for R0 and I(0). Therefore, it\n# would be a good idea to apply a transformation to our\n# search space so that we are not wasting time exploring\n# infeasible regions of parameter space.\ninitial_transformed_parameters &lt;- log(c(\n    \"R0\" = 4,\n    \"Initial_infectious\" = 20\n))\n\nSo now we are in a position to define our function that we wish to optimise. The code is below:\n\n#### Fitting routine ####\n\n# We have selected R0 and I(0) as our free parameters\n# We need a function that accepts R0 and I(0) as arguments,\n# solves the model using these inputs, and calculates the\n# sum of squares of the data given these parameters\n\nSSQ_function &lt;- function(transformed_parameters,\n                         data = uncontrolled_period$Cases[-1],\n                         state_base = state,\n                         times_ = times,\n                         func. = COVID.base,\n                         parms_base = parameters) {\n\n    # Untransform parameters\n    R0 &lt;- exp(transformed_parameters[\"R0\"])\n    Initial_infectious &lt;- exp(transformed_parameters[\"Initial_infectious\"])\n\n    # Calculate updated susceptible population\n    Initial_susceptible &lt;- state_base[\"Susceptible\"] + state_base[\"Infectious\"] - Initial_infectious\n\n    # Overwrite baseline parameters with proposed parameters\n    parms_base[\"R0\"] &lt;- R0\n    state_base[\"Susceptible\"] &lt;- Initial_susceptible\n    state_base[\"Infectious\"] &lt;- Initial_infectious\n\n    # Solve model with updated parameters\n    out &lt;- solve.base.model(\n        state_base,\n        times_,\n        func.,\n        parms_base\n    )\n    return(\n        sum((uncontrolled_period$Cases[-1] - out$Incidence[-1])^2)\n    )\n}\n\nWe can check it works as intended:\n\nSSQ_initial_from_function &lt;- SSQ_function(initial_transformed_parameters)\nSSQ_initial_from_function\n\n[1] 24516.09\n\nSSQ_initial\n\n[1] 24516.09\n\n\nYay, we are getting the same result.\nWith our SSQ_function now set up, we can use the optim function to determine the optimal parameters, that is the parameter values that minimize the sum of squares.\nWe will use the Nelder-Mead search algorithm. This is a search algorithm that allows rapid exploration of the parameter space for the optimal parameters.\n\n#### Optimal parameters ####\n\n# Use the optim function to determine the parameters that\n# minimize the negative log-likelihood (i.e., maximize\n# the likelihood)\n# We will use the Nelder-Mead optimization solver\noptim_NM &lt;- optim(\n    par = initial_transformed_parameters,\n    fn = SSQ_function,\n    control = list(maxit = 500),\n    method = \"Nelder-Mead\",\n    hessian = TRUE\n)\n\nOnce the search is complete, inspect the solution:\n\n# Check for convergence (always code 0 for NM)\noptim_NM$convergence # 0 - converged; 1 - failed to converge\n\n[1] 0\n\n# Inspect solution\noptim_NM$par\n\n                R0 Initial_infectious \n          1.094083           4.302341 \n\n\nWhat are the initial values of the two fitted parameters?\n\nThe results are a little surprising. However, remember that our search was conducted with reference to the transformed parameters; in order to retrieve the true optimal parameter values we must invert the transformation:\n\n# Back-transform parameters\noptimum_parameters &lt;- exp(optim_NM$par)\noptimum_parameters\n\n                R0 Initial_infectious \n          2.986444          73.872554 \n\n\nBut have we improved our SSQ from the initial guess we had?\n\n# Inspect the optimal sum of squared residuals\noptimum_SSQ &lt;- optim_NM$value\noptimum_SSQ\n\n[1] 15100\n\n\nHow does the SSQ score at the optimal value compare with our initial SSQ score (SSQ_initial)?\n\nSatisfied that we have found the optimal solution, let’s now solve the model using these parameter values and compare the solution with our observed data:\n\n#### Optimal model solution ####\n\n# Create the optimal parameter and state vectors\noptimal_parameters &lt;- parameters\noptimal_parameters[\"R0\"] &lt;- optimum_parameters[\"R0\"]\n\noptimal_initial_state &lt;- state\noptimal_initial_state[\"Susceptible\"] &lt;- state[\"Susceptible\"] + state[\"Infectious\"] - optimum_parameters[\"Initial_infectious\"]\noptimal_initial_state[\"Infectious\"] &lt;- optimum_parameters[\"Initial_infectious\"]\n\n# Solve the model given the optimal parameters and initial conditions\noptimal_solution &lt;- solve.base.model(\n    y_ = optimal_initial_state,\n    times_ = times,\n    func. = COVID.base,\n    parms = optimal_parameters\n)\n\n\n# Plot the optimal solution\nggplot(first_wave) +\n    geom_col(aes(x = Date, y = Cases), width = 1, fill = \"dodgerblue2\", colour = \"blue\") +\n    geom_point(data = optimal_solution, aes(x = Date, y = Incidence), size = 2, colour = \"firebrick2\") +\n    ylab(\"Daily cases\") +\n    xlab(\"\") +\n    ggtitle(\"Fit to unmitigated period\") +\n    theme_bw()\n\n\n\n\n\n\n\n\nHow does this fit compare to the observed data?",
    "crumbs": [
      "Modelling an outbreak - COVID-19 in Thailand"
    ]
  },
  {
    "objectID": "session5_fitting_models_in_r/session5_fitting_models_in_r.html#covid-19-likelihood-function",
    "href": "session5_fitting_models_in_r/session5_fitting_models_in_r.html#covid-19-likelihood-function",
    "title": "Modelling an outbreak - COVID-19 in Thailand",
    "section": "Covid-19 Likelihood function",
    "text": "Covid-19 Likelihood function\nLet us calculate the likelihood of our observed data given our COVID model (which of course is specific to the current parameter values that we have used). To do this, a common practice is to assume that the observed daily incidence (stored in the dataframe uncontrolled_period) is a Poisson-distributed random variable with mean given by our model-predicted incidence (stored in the dataframe out_init). Under this model the (log-)likelihood of each daily observation can be calculated using the dpois() function; and the total (log-)likelihood for all of the observations is simply the sum of all these: \\[\n\\log p(\\text{Cases}|\\vec{\\theta}) = \\sum_{i=1}^N \\log \\text{Poisson}(c_i|\\mu = \\text{Model}(\\theta,i)),\n\\] where Cases is the vector containing our case data, \\(c_i\\) is the number of cases on the \\(i\\)th day, Model\\((\\theta,i)\\) is the model output given our parameters on day \\(i\\), and \\(\\mu\\) is the mean of the Poisson distribution.\n\nThere are many possible distributions that can be used to develop the likelihood. You may wish to investigate some of the density distributions available in R, which you can do by typing ?distributions in your console.\nAnother distribution, which allows us to account for high variability in the data is the negative binomial distribution. We could use the output from our last function call to calculate the likelihood of our observed data given our COVID model using dnbinom() function in much the same way as the Poisson distribution. Those with a particular interest in statistics and probability distributions may wish to experiment and to consider the pros and cons of different choices. For the remainder of this exercise, however, we will continue with the Poisson distribution which has the attribute of having only one parameter to estimate, the mean.\n\n\n\n\n\n\nChanging distributions\n\n\n\nThe decision on what distribution to use within your likelihood function is a Model Choice. Sometimes, multiple distributions may suit your need. Be aware that each distribution has different assumptions.",
    "crumbs": [
      "Modelling an outbreak - COVID-19 in Thailand"
    ]
  },
  {
    "objectID": "session5_fitting_models_in_r/session5_fitting_models_in_r.html#bonus-code",
    "href": "session5_fitting_models_in_r/session5_fitting_models_in_r.html#bonus-code",
    "title": "Modelling an outbreak - COVID-19 in Thailand",
    "section": "Bonus code",
    "text": "Bonus code\nCopy and paste this code to perform a grid search - getting the negative log likelihood across a sequence of each parameter value.\n\n# Specify search grid\nR0_vec &lt;- seq(from = 0.1, to = 10, by = 0.1)\ninitial_infectious_vec &lt;- seq(from = 1, to = 50, by = 1)\n\n# the function that will perform grid search\n\nnll.grid &lt;- function(R0_vec, initial_infectious_vec) {\n    parameter_grid &lt;- expand.grid(\n        R0 = R0_vec,\n        initial_infectious = initial_infectious_vec\n    )\n    nll &lt;- data.frame(matrix(nrow = nrow(parameter_grid), ncol = 1))\n    colnames(nll) &lt;- \"NLL\"\n    for (row_of_params in seq(1, dim(parameter_grid)[1])) {\n        transformed_params &lt;- log(c(\n            \"R0\" = parameter_grid[row_of_params, 1],\n            \"Initial_infectious\" = parameter_grid[row_of_params, 2]\n        ))\n        nll[row_of_params, ] &lt;- negative_log_likelihood(transformed_params)\n    }\n    return(data.frame(\n        Reproduction_number = parameter_grid[\"R0\"],\n        Initial_infectious = parameter_grid[\"initial_infectious\"],\n        nll\n    ))\n}\n\n# call the function that will calculate likelihood surface\nnll_grid_results &lt;- nll.grid(R0_vec, initial_infectious_vec)\n\n\n# Plot likelihood surface\nnll_plot &lt;- nll_grid_results %&gt;%\n    ggplot2::ggplot(aes(\n        x = R0,\n        y = initial_infectious,\n        fill = NLL,\n        z = NLL\n    )) +\n    geom_tile() +\n    geom_contour(breaks = c(100, 110, 120, 130, 200, 500, 1000, 4000)) +\n    ylab(\"I(0)\") +\n    xlab(\"R0\") +\n    ggtitle(\"Likelihood surface\") +\n    theme_bw()\n\n# Extract optimum from grid search\ngrid_optimum &lt;- nll_grid_results[which.min(nll_grid_results$NLL), ]\ngrid_optimum\n\n     R0 initial_infectious      NLL\n2940  4                 30 144.9431\n\n# Superimpose optimum on likelihood surface plot\nnll_plot &lt;- nll_plot +\n    geom_point(aes(\n        x = grid_optimum$R0,\n        y = grid_optimum$initial_infectious\n    ),\n    colour = \"red\",\n    )\n# Superimpose optimal point to negative-log-likelihood plot\nnll_plot &lt;- nll_plot + geom_point(aes(\n    x = optimum_parameters[\"R0\"],\n    y = optimum_parameters[\"Initial_infectious\"]\n),\ncolour = \"yellow\",\nsize = 1\n)\n\nprint(nll_plot)\n\n\n\n\n\n\n\n\nWhy might a grid search not be the best option for finding optimum parameter values ?",
    "crumbs": [
      "Modelling an outbreak - COVID-19 in Thailand"
    ]
  },
  {
    "objectID": "session8_vector_borne_modelling_in_r/session8_vector_borne_modelling_in_r.html",
    "href": "session8_vector_borne_modelling_in_r/session8_vector_borne_modelling_in_r.html",
    "title": "Vector-borne disease models in R",
    "section": "",
    "text": "SPARK short course ‘Mathematical Modelling of Infectious Diseases’, Indonesia, March 2023\n\nDeveloped and presented by Trish Campbell, The University of Melbourne at The Peter Doherty Institute for Infection and Immunity",
    "crumbs": [
      "Vector-borne disease models in R"
    ]
  },
  {
    "objectID": "session8_vector_borne_modelling_in_r/session8_vector_borne_modelling_in_r.html#part-1-a-model-for-dengue",
    "href": "session8_vector_borne_modelling_in_r/session8_vector_borne_modelling_in_r.html#part-1-a-model-for-dengue",
    "title": "Vector-borne disease models in R",
    "section": "Part 1: A model for dengue",
    "text": "Part 1: A model for dengue\n\nProblem description\nIn the previous session, we developed a model for a mosquito-borne disease. Here, we will code that model in R and parameterise it using typical values applicable to dengue transmission.\n\n\nDefine the model parameters and time period for simulations\nAs we saw in previous sessions, model parameters must be estimated either from literature or from a model. In developing this model for dengue, we will use parameter values obtained from the following paper:\nNdii, M.Z., Hickson, R.I., Allingham, D. and Mercer, G.N., 2015. Modelling the transmission dynamics of dengue in the presence of Wolbachia. Mathematical Biosciences, 262, pp.157–166.\n\n\n\n\n\nParameter\nName\nValue\nUnits\n\n\n\n\nNumber of bites\nbites\n0.63\nper mosquito per day\n\n\nProbability of transmission - mosquito to human\nT_HM\n0.26\nNA\n\n\nProbability of transmission - human to mosquito\nT_MH\n0.26\nNA\n\n\nDuration of infection - humans\ninfectious period\n5\ndays\n\n\nMosquito birth and death rate\nmu_M\n1/14\nper day\n\n\n\n\n\nUsing the table of parameter names and values above, copy and paste the following code chunk into your editor and complete the code by entering the VALUE, NAME and DESCRIPTION where they are missing:\n\n# Model parameters\nparameters &lt;- c(\n bites = VALUE, # number of bites per mosquito per day\n NAME = 0.26, # probability of transmission - mosquito to human\n T_MH = 0.26, # DESCRIPTION\n infectious_period = 5, # days\n mu_M = VALUE # DESCRIPTION\n)\n\nWe also need to specify the start time and end time for our simulation, as well as the time step to report values. We will use the times specified in the Ndii et al. paper. Copy and paste the code chunk below into your editor, and complete by specifying the arguments to the seqfunction, indicated as VALUE, VALUE, VALUE using a time step of 1 day:\n\n# Time window\nstart_date = as.Date(\"2008-11-02\")\nend_date = as.Date(\"2009-05-31\")\ntimes = seq(VALUE, VALUE, VALUE)\n\n\n\nSet up the initial conditions\nThe Ndii et al. paper develops a model for dengue transmission in the city of Cairns, Australia, which had an approximate human population of 150,000 in 2008. The carrying capacity for the mosquito population (the maximum population that can be supported without environmental degradation) is related to the number of available breeding sites, which in turn is dependent on the number of humans. The Ndii et al paper sets the carrying capacity at three times the human population, and so we will assume an initial mosquito population size of 450,000, half of which is female. We only model female mosquitoes as they are the only ones that transmit infection. Our simulations will commence with 2 infectious humans and 10 infectious mosquitoes, with all remaining humans and mosquitoes susceptible.\nUsing this information, copy and paste the following code chunk into your editor and complete the code by entering VALUE where it is missing, and calculating the population in the human recovered compartment and mosquito infectious compartment using the values of other variables (where EXPRESSION USING OTHER VARIABLES is indicated):\n\n# Initial conditions\nhuman_population &lt;- VALUE # population of Cairns in 2008\ninitial_human_susceptible &lt;- VALUE\ninitial_human_infectious &lt;- 2\ninitial_human_recovered &lt;- EXPRESSION USING OTHER VARIABLES\nmosquito_population &lt;- 225000 \ninitial_mosquito_susceptible &lt;- VALUE\ninitial_mosquito_infectious &lt;- EXPRESSION USING OTHER VARIABLES\n\n\n\nDefine the model variables (also known as compartments or states)\nWe define the compartments of our model, initialise the value of each using the initial conditions and then gather them together in a single variable. Copy and paste the code chunk below into your editor and complete the code by entering VALUE where it is missing:\n\n# Define model compartments, gather into a single variable to capture the state \n# of the system and set to initial values\nstate &lt;- c(Susceptible_human = VALUE,\n           Infectious_human = VALUE,\n           Recovered_human = VALUE,\n           Susceptible_mosquito = VALUE,\n           Infectious_mosquito = VALUE)\n\n\n\nSet up a function to solve the equations\nNow that we have defined our parameters, compartments and initial conditions, we will write a function to numerically solve our dengue model using the model equations developed in the previous session. Copy and paste the incomplete code chunk below into your editor and complete the code by replacing the text indicated by EXPRESSION USING OTHER VARIABLES:\n\n# Model function\ndengue_base &lt;- function(t, state, parameters){\n  with(as.list(c(state, parameters)), {\n    # Calculate the total population sizes\n    Total_human_population &lt;- EXPRESSION USING OTHER VARIABLES\n    Total_mosquito_population &lt;- EXPRESSION USING OTHER VARIABLES\n    \n    # Calculate the average force of infection imposed on each susceptible human\n    force_of_infection_on_human &lt;- EXPRESSION USING OTHER VARIABLES\n    \n    # Calculate the average force of infection imposed on each susceptible mosquito\n    force_of_infection_on_mosquito &lt;- EXPRESSION USING OTHER VARIABLES\n    \n    # Calculate the (net) instantaneous change in each compartment\n    Susceptible_human_change &lt;- EXPRESSION USING OTHER VARIABLES \n    Infectious_human_change &lt;- EXPRESSION USING OTHER VARIABLES\n    Recovered_human_change &lt;- EXPRESSION USING OTHER VARIABLES\n    Susceptible_mosquito_change &lt;- EXPRESSION USING OTHER VARIABLES \n    Infectious_mosquito_change &lt;- EXPRESSION USING OTHER VARIABLES\n    \n    # Return net changes as list\n    return(list(\n      c(\n        Susceptible_human_change,\n        Infectious_human_change,\n        Recovered_human_change,\n        Susceptible_mosquito_change,\n        Infectious_mosquito_change\n      )\n    ))\n  })\n}\n\n\n\nRun the model and plot the results\nWe now run the model, using the code you learned in a previous session. Copy and paste the code chunk below into your editor, enter VALUE where it is missing, and then run your file:\n\n# Solve model\nout_dengue_base &lt;- ode(y = VALUE, times = as.numeric(times - times[1]), \n                       func = VALUE, parms = VALUE)\n\n# Plot solution\nplot(out_dengue_base, \n     main = c(\"Susceptible humans\", \"Infectious humans\", \"Recovered humans\",\n              \"Susceptible mosquitoes\", \"Infectious mosquitoes\"), \n     xlab = \"Time\", ylab = c(\"population size\"))\n\nYour plot should look this this:\n\n\n\n\n\n\n\n\n\n\n\nComparing to published dengue incidence data\nThe weekly incidence of dengue infections in Cairns over the period we ran our model is reported in Ritchie, S.A., Pyke, A.T., Hall-Mendelin, S.et al., 2013. An explosive epidemic of DENV-3 in Cairns, Australia. PLoS One, 8(7), p.e68137.\n\n\n\n\n\nThe data in this published plot represent the weekly number of newly confirmed cases, while the model output we have saved reports the daily number of infectious people. To compare our data to the published data, we need to convert our data into new infections, that is, convert prevalence data into incidence data. It is possible to save and report new infections directly within your model function, but here we will calculate the number of new infections using the data we have already generated. From our model equations, we have:\n\n\nSusceptible human change = - new infections\n\n\nIf we can calculate susceptible human change from our model output, we will have the number of new infections. Since our model output records the number of humans in the S compartment at each of our recorded time steps, if we take the difference between these entries, we will have the susceptible human change, and we get the new infections by changing its sign. Copy and paste the code below into your editor, to convert daily prevalence into weekly incidence and plot the results:\n\n# Convert ode output to data frame\ndengue_base_infections &lt;- as.data.frame(out_dengue_base[, c(\"time\", \"Susceptible_human\", \"Infectious_human\", \"Recovered_human\")])\n\n# Create columns for new infections and cumulative new infections, \n# Select every 7th row and calculate the difference\n dengue_base_infections &lt;- dengue_base_infections  %&gt;%\n                          mutate(Susceptible_human_change = -c(0, diff(Susceptible_human)),\n                                 Cumulative_human_infections = cumsum(Susceptible_human_change)) %&gt;%\n                          filter(time %% 7 == 0) %&gt;%\n                          select(c(\"time\", \"Cumulative_human_infections\")) %&gt;%\n                          mutate(Weekly_human_infections = c(0, diff(Cumulative_human_infections)))    \n\n\n# Plot solution\nplot(dengue_base_infections$time, dengue_base_infections$Weekly_human_infections, \n     xlab = \"Time\", ylab = c(\"number of infections\"),\n     main = \"Weekly human new infections\")\n\n\n\n\n\n\n\n\nComparing this plot to the published data, we can see that while we have captured the shape of the outbreak reasonably well, our model generates orders of magnitude higher new infections than were reported. There are numerous potential explanations for this. In the next section, we will adapt our model to see whether we can improve the fit.",
    "crumbs": [
      "Vector-borne disease models in R"
    ]
  },
  {
    "objectID": "session8_vector_borne_modelling_in_r/session8_vector_borne_modelling_in_r.html#part-1-solutions",
    "href": "session8_vector_borne_modelling_in_r/session8_vector_borne_modelling_in_r.html#part-1-solutions",
    "title": "Vector-borne disease models in R",
    "section": "Part 1: Solutions",
    "text": "Part 1: Solutions\n\nPart 1: Spoiler alertPart 1: Solutions for Part 1\n\n\nThe solutions tab contains the complete code for Part 1. Only click on it if you have tried to complete the exercises yourself and need some help\n\n\nBy the end of Part 1, your script should look like this:\n\n#############################################################\n## MODELLING VECTOR-BORNE DISEASES PRACTICAL SESSION PART 1##\n#############################################################\n\n# A model for dengue transmission - Part 1\n# Some R code to numerically solve a set of ordinary differential equations\n# for a simple model of dengue. Results are then plotted.\n\n# Library imports\nrequired_packages &lt;- (c(\"dplyr\",\n                        \"deSolve\",\n                        \"ggplot2\"))\nfor (pkg in required_packages) {\n  if (!require(pkg, character.only = TRUE)) {\n    install.packages(pkg)\n    library(pkg, character.only = TRUE)\n  }\n}\n\n# Model parameters\nparameters &lt;- c(\n  bites = 0.63, # number of bites per mosquito per day\n  T_HM = 0.26, # probability of transmission - mosquito to human\n  T_MH = 0.26, # Probability of transmission - human to mosquito \n  infectious_period = 5, # days\n  mu_M = 1/14 # Mosquito birth and death rate\n)\n\n# Time window\nstart_date = as.Date(\"2008-11-02\")\nend_date = as.Date(\"2009-05-31\")\ntimes = seq(start_date, end_date, by = 1)\n\n# Initial conditions\nhuman_population &lt;- 150000 # population of Cairns in 2008\ninitial_human_susceptible &lt;- 149998\ninitial_human_infectious &lt;- 2\ninitial_human_recovered &lt;- human_population - initial_human_susceptible - initial_human_infectious\nmosquito_population &lt;- 225000 \ninitial_mosquito_susceptible &lt;- 224990\ninitial_mosquito_infectious &lt;- mosquito_population - initial_mosquito_susceptible\n\n# Define model compartments, gather into a single variable to capture the state of the system and set to initial values\nstate &lt;- c(Susceptible_human = initial_human_susceptible,\n           Infectious_human = initial_human_infectious,\n           Recovered_human = initial_human_recovered,\n           Susceptible_mosquito = initial_mosquito_susceptible,\n           Infectious_mosquito = initial_mosquito_infectious)\n\n\n# Model function\ndengue_base &lt;- function(t, state, parameters){\n  with(as.list(c(state, parameters)), {\n    # Calculate the total population sizes\n    Total_human_population &lt;- Susceptible_human + Infectious_human + Recovered_human\n    Total_mosquito_population &lt;- Susceptible_mosquito + Infectious_mosquito\n    \n    # Calculate the average force of infection imposed on each susceptible human\n    force_of_infection_on_human &lt;- bites * T_HM * Infectious_mosquito / Total_human_population\n    \n    # Calculate the average force of infection imposed on each susceptible mosquito\n    force_of_infection_on_mosquito &lt;- bites * T_MH * Infectious_human / Total_human_population\n    \n    # Calculate the (net) instantaneous change in each compartment\n    Susceptible_human_change &lt;- -force_of_infection_on_human * Susceptible_human\n    Infectious_human_change &lt;- force_of_infection_on_human * Susceptible_human - Infectious_human / infectious_period\n    Recovered_human_change &lt;- Infectious_human / infectious_period\n    Susceptible_mosquito_change &lt;- mu_M * Total_mosquito_population - (force_of_infection_on_mosquito + mu_M) * Susceptible_mosquito \n    Infectious_mosquito_change &lt;- force_of_infection_on_mosquito * Susceptible_mosquito - mu_M * Infectious_mosquito\n    \n    # Return net changes as list\n    return(list(\n      c(\n        Susceptible_human_change,\n        Infectious_human_change,\n        Recovered_human_change,\n        Susceptible_mosquito_change,\n        Infectious_mosquito_change\n      )\n    ))\n  })\n}\n\n# Solve model\nout_dengue_base &lt;- ode(y = state, times = as.numeric(times - times[1]), func = dengue_base, parms = parameters)\n\n# Plot solution\nplot(out_dengue_base, \n     main = c(\"Susceptible humans\", \"Infectious humans\", \"Recovered humans\",\n              \"Susceptible mosquitoes\", \"Infectious mosquitoes\"), \n     xlab = \"Time\", ylab = c(\"population size\"))\n\n# Convert ode output to data frame\ndengue_base_infections &lt;- as.data.frame(out_dengue_base[, c(\"time\", \"Susceptible_human\", \"Infectious_human\", \"Recovered_human\")])\n\n# Create columns for new infections and cumulative new infections, \n# Select every 7th row and calculate the difference\ndengue_base_infections &lt;- dengue_base_infections  %&gt;%\n  mutate(Susceptible_human_change = -c(0, diff(Susceptible_human)),\n         Cumulative_human_infections = cumsum(Susceptible_human_change)) %&gt;%\n  filter(time %% 7 == 0) %&gt;%\n  select(c(\"time\", \"Cumulative_human_infections\")) %&gt;%\n  mutate(Weekly_human_infections = c(0, diff(Cumulative_human_infections)))    \n\n\n# Plot solution\nplot(dengue_base_infections$time, dengue_base_infections$Weekly_human_infections, \n     xlab = \"Time\", ylab = c(\"number of infections\"),\n     main = \"Weekly human new infections\")",
    "crumbs": [
      "Vector-borne disease models in R"
    ]
  },
  {
    "objectID": "session8_vector_borne_modelling_in_r/session8_vector_borne_modelling_in_r.html#part-2-adapting-the-model",
    "href": "session8_vector_borne_modelling_in_r/session8_vector_borne_modelling_in_r.html#part-2-adapting-the-model",
    "title": "Vector-borne disease models in R",
    "section": "Part 2: Adapting the model",
    "text": "Part 2: Adapting the model\nIn this part, we will adapt the model we developed in Part 1 to try to better capture the Cairns dengue outbreak dynamics. It is important to note that our model in Part 1 mostly used parameter values from Ndii et al. Two of those parameters, the probability of transmission from mosquito to human (T_HM) and the probability of transmission from human to mosquito (T_MH) were fitted using the Ndii et al. model, which has a different structure to the model we developed in Part 1. This highlights the very important point that:\n\nParameter values may not be directly transferable between models\n\n\nWhat might be missing from our dengue model?\nWhen we wrote our vector-borne disease model, we made a simplifying assumption that both humans and mosquitoes are infectious immediately upon being infected. We noted that in reality, it takes time for the infectious load to build in a host before they are capable of transmitting infection. As you have seen in previous sessions, we refer to this as the exposed period — an individual is infected, but not yet infectious. Ndii et al. account for this in their model.\n2.1 Ndii et al. use 10 days as the duration of the exposed period in mosquitoes. With mosquitoes living on average for 14 days, what do you think are the implications of this exposed period for transmission?\n\n\n\n\n2.2 Ndii et al. use 5.5 days as the duration of the exposed period in humans. Which exposed period (mosquito or human) do you think would have a greater impact on dengue disease dynamics? Why?\n\n\n\nAdding another compartment to our model diagram\nBefore we begin coding a new version of our model, it’s a good idea to draw the structure of the new model. Redraw the model that you produced in the previous session to include exposed compartments for both the human and the mosquito populations.\n\n\n\nInstructions:\n\n\n\n\nYou can draw a diagram electronically in a program such as PowerPoint, or you can draw your diagram by hand and take a photo\n\n\n\n\nMake sure you label all compartments as well as the inflows and outflows from each compartment.\n\n\n\n\nSave your diagram in one of the following formats: .jpg, .gif, .png\n\n\n\n\nUpload your diagram using the Browse… button below\n\n\n\n\nIf you prefer, you can describe your model in words in the space below\n\n\n\n\nNB: You can replace a file by clicking on the file name and selecting a file with a different name.\n\n\n\n\nUpload your image\n\n\n \n\n\n\n\n\n\nAdding another compartment to our model code\n2.3 To add a new compartment to our model, several aspects need to be changed. What is the additional information that needs to be provided?\n\nBefore beginning, you should add a heading in your file indicating that you have started a new model, as the code we write here will overwrite the parameters and variables you used in Part 1, other than your final results. For example, you could copy and paste the code chunk below into your editor to start writing your code for the new model:\n\n#############################################################\n## MODELLING VECTOR-BORNE DISEASES PRACTICAL SESSION PART 2##\n#############################################################\n\n# A model for dengue transmission - Part 2\n# Some R code to numerically solve a set of ordinary differential equations\n# for a modified model of dengue. Results are then plotted.\n\nFirst we need to add new parameters. Copy and paste the code chunk below into your editor, enter VALUE where it is missing, and then run your file:\n\n# Model parameters\nparameters &lt;- c(\n bites = 0.63, # number of bites per mosquito per day\n T_HM = 0.26, # probability of transmission - mosquito to human\n T_MH = 0.26, # probability of transmission - human to mosquito\n infectious_period = 5, # days. Duration in infectious compartment\n mu_M = 1/14, # per day. Mosquito birth and death rate.\n exposed_period_H = VALUE, # days. Duration in exposed compartment - human\n exposed_period_M = VALUE # days. Duration in exposed compartment - mosquito\n)\n\nNext we need to add some new initial conditions. Let’s start with no exposed humans and no exposed mosquitoes. Copy and paste the code chunk below into your editor, completing EXPRESSION USING OTHER VARIABLES where it is missing:\n\n# Initial conditions\nhuman_population &lt;- 150000 # population of Cairns in 2008\ninitial_human_susceptible &lt;- 149998\ninitial_human_exposed &lt;- 0\ninitial_human_infectious &lt;- 2\ninitial_human_recovered &lt;- EXPRESSION USING OTHER VARIABLES\nmosquito_population &lt;- 225000 # 3 times human population, divided by 2\ninitial_mosquito_susceptible &lt;- 224990\ninitial_mosquito_exposed &lt;- 0\ninitial_mosquito_infectious &lt;- EXPRESSION USING OTHER VARIABLES\n\nAs before, we now initialise our model states, using the initial conditions we set above. Copy and paste the code chunk below into your editor, completing EXPRESSION USING OTHER VARIABLES where it is missing:\n\n# Define model compartments, gather into a single variable to capture the \n# state of the system and set to initial values\nstate &lt;- c(Susceptible_human = initial_human_susceptible,\n           Exposed_human = EXPRESSION USING OTHER VARIABLES,\n           Infectious_human = initial_human_infectious,\n           Recovered_human = initial_human_recovered,\n           Susceptible_mosquito = initial_mosquito_susceptible,\n           Exposed_mosquito = EXPRESSION USING OTHER VARIABLES,\n           Infectious_mosquito = initial_mosquito_infectious)\n\nWe set up times to run the model, here extending the end date (for reasons that will become clear). Copy and paste the code chunk below into your editor, to continue your code:\n\n# Time window\nstart_date = as.Date(\"2008-11-02\")\nend_date = as.Date(\"2011-05-31\")\ntimes = seq(start_date, end_date, by = 1)\n\nNext, we adapt our model function to include the changes we have made to the model structure.Copy and paste the code chunk below into your editor to continue your code:\n\n# Model function\ndengue_with_E &lt;- function(t, state, parameters){\n  with(as.list(c(state, parameters)), {\n    # Calculate the total population sizes\n    Total_human_population &lt;- Susceptible_human + Infectious_human + \n      Recovered_human + Exposed_human\n    Total_mosquito_population &lt;- Susceptible_mosquito + Infectious_mosquito + \n      Exposed_mosquito\n    \n    # Calculate the average force of infection imposed on each susceptible human\n    force_of_infection_on_human &lt;- bites * T_HM * Infectious_mosquito / \n      Total_human_population\n    \n    # Calculate the average force of infection imposed on each susceptible mosquito\n    force_of_infection_on_mosquito &lt;- bites * T_MH * Infectious_human / \n      Total_human_population\n    \n    # Calculate the (net) instantaneous change in each compartment\n    Susceptible_human_change &lt;- -force_of_infection_on_human * Susceptible_human\n    Exposed_human_change &lt;- force_of_infection_on_human * Susceptible_human - \n      Exposed_human / exposed_period_H\n    Infectious_human_change &lt;- Exposed_human / exposed_period_H - \n      Infectious_human / infectious_period\n    Recovered_human_change &lt;- Infectious_human / infectious_period\n    Susceptible_mosquito_change &lt;- mu_M * Total_mosquito_population - \n      (force_of_infection_on_mosquito + mu_M) * Susceptible_mosquito\n    Exposed_mosquito_change &lt;- force_of_infection_on_mosquito * \n      Susceptible_mosquito - Exposed_mosquito * (1 / exposed_period_M + mu_M) \n    Infectious_mosquito_change &lt;- Exposed_mosquito / exposed_period_M - mu_M * \n      Infectious_mosquito\n    \n    # Return net changes as list\n    return(list(\n      c(\n        Susceptible_human_change,\n        Exposed_human_change,\n        Infectious_human_change,\n        Recovered_human_change,\n        Susceptible_mosquito_change,\n        Exposed_mosquito_change,\n        Infectious_mosquito_change\n      )\n    ))\n  })\n}\n\n2.4 Identify the elements of the model function above that have changed compared to your model in Part 1\n\nWe are now ready to run the model and plot the results. Note that we use a different name for the output to preserve the results from your model in Part 1. Copy and paste the code chunk below into your editor, enter VALUE where it is missing, and then run the new model parts of your file:\n\n# Solve model\nout_dengue_with_E &lt;- ode(y = VALUE, times = as.numeric(times - times[1]), \n                         func = VALUE, parms = VALUE)\n\n# Plot solution\nplot(out_dengue_with_E, \n     main = c(\"Susceptible humans\", \"Exposed humans\", \"Infectious humans\", \n              \"Recovered humans\",   \"Susceptible mosquitoes\", \n              \"Exposed mosquitoes\", \"Infectious mosquitoes\"), \n     xlab = \"Time\", ylab = c(\"population size\"))\n\nYour plot should look this this:\n\n\n\n\n\n\n\n\n\nAs we did in Part 1, we want to convert our dengue prevalence data to incidence data. In our new model, we have:\n\n\nSusceptible human change = - new infections\n\n\nExposed human change = new infections - transitions to infectious\n\n\nInfectious human change = transitions to infectious - recoveries\n\n\nRecovered human change = recoveries\n\n\nAs before, we could calculate the difference in our susceptible population from our model output to be left with ‘new infections’ at each time step. However, the new infections in this model may not yet have come to the attention of the health system. We make the simplifying assumption that symptoms occur at the same time that a person becomes infectious, and so we count the transitions into the infectious state as our new ‘cases’ and obtain these by adding the infectious human change and recovered human change. Copy and paste the code below into your editor, to convert daily prevalence into weekly incidence and plot the results:\n\n# Convert ode output to data frame\ndengue_with_E_infections &lt;- as.data.frame(\n  out_dengue_with_E[, c(\"time\", \"Infectious_human\", \"Recovered_human\")])\n\n# Create columns for new infections and cumulative new infections, \n# Select every 7th row and calculate the difference\ndengue_with_E_infections &lt;- dengue_with_E_infections  %&gt;%\n                          mutate(Infectious_human_change = \n                                   c(0, diff(Infectious_human)),\n                                 Recovered_human_change = \n                                   c(0, diff(Recovered_human)),\n                                 New_human_infections = \n                                   Infectious_human_change + \n                                   Recovered_human_change,\n                                 Cumulative_human_infections = \n                                   cumsum(New_human_infections)) %&gt;%\n                          filter(time %% 7 == 0) %&gt;%\n                          select(c(\"time\", \"Cumulative_human_infections\")) %&gt;%\n                          mutate(Weekly_human_infections = \n                                   c(0, diff(Cumulative_human_infections)))\n     \n# Plot solution\nplot(dengue_with_E_infections$time, \n     dengue_with_E_infections$Weekly_human_infections, \n     xlab = \"Time\", ylab = c(\"number of infections\"),\n     main = \"Weekly human new infections, model with E\")\n\n\n\n\n\n\n\n\nAs a reminder, here are the published data from Part 1:\n\n\n\n\n\n2.5 How do the modelled results compare to those for the model in Part 1? (Hint: Look at the magnitude and the timing of the peak.)\n\n\n\n\n2.6 Why do you think the modelled behaviour has changed?",
    "crumbs": [
      "Vector-borne disease models in R"
    ]
  },
  {
    "objectID": "session8_vector_borne_modelling_in_r/session8_vector_borne_modelling_in_r.html#part-2-solutions",
    "href": "session8_vector_borne_modelling_in_r/session8_vector_borne_modelling_in_r.html#part-2-solutions",
    "title": "Vector-borne disease models in R",
    "section": "Part 2: Solutions",
    "text": "Part 2: Solutions\n\nPart 2: Spoiler alertPart 2: Solutions for Part 2\n\n\nThe solutions tab contains the complete code for Parts 1 and 2. Only click on it if you have tried to complete the exercises yourself and need some help\n\n\nBy the end of Part 2, your script should look like this:\n\n#############################################################\n## MODELLING VECTOR-BORNE DISEASES PRACTICAL SESSION PART 1##\n#############################################################\n\n# A model for dengue transmission - Part 1\n# Some R code to numerically solve a set of ordinary differential equations\n# for a simple model of dengue. Results are then plotted.\n\n# Library imports\nrequired_packages &lt;- (c(\"dplyr\",\n                        \"deSolve\",\n                        \"ggplot2\"))\nfor (pkg in required_packages) {\n  if (!require(pkg, character.only = TRUE)) {\n    install.packages(pkg)\n    library(pkg, character.only = TRUE)\n  }\n}\n\n# Model parameters\nparameters &lt;- c(\n  bites = 0.63, # number of bites per mosquito per day\n  T_HM = 0.26, # probability of transmission - mosquito to human\n  T_MH = 0.26, # Probability of transmission - human to mosquito \n  infectious_period = 5, # days\n  mu_M = 1/14 # Mosquito birth and death rate\n)\n\n# Time window\nstart_date = as.Date(\"2008-11-02\")\nend_date = as.Date(\"2009-05-31\")\ntimes = seq(start_date, end_date, by = 1)\n\n# Initial conditions\nhuman_population &lt;- 150000 # population of Cairns in 2008\ninitial_human_susceptible &lt;- 149998\ninitial_human_infectious &lt;- 2\ninitial_human_recovered &lt;- human_population - initial_human_susceptible - initial_human_infectious\nmosquito_population &lt;- 225000 \ninitial_mosquito_susceptible &lt;- 224990\ninitial_mosquito_infectious &lt;- mosquito_population - initial_mosquito_susceptible\n\n# Define model compartments, gather into a single variable to capture the state of the system and set to initial values\nstate &lt;- c(Susceptible_human = initial_human_susceptible,\n           Infectious_human = initial_human_infectious,\n           Recovered_human = initial_human_recovered,\n           Susceptible_mosquito = initial_mosquito_susceptible,\n           Infectious_mosquito = initial_mosquito_infectious)\n\n\n# Model function\ndengue_base &lt;- function(t, state, parameters){\n  with(as.list(c(state, parameters)), {\n    # Calculate the total population sizes\n    Total_human_population &lt;- Susceptible_human + Infectious_human + Recovered_human\n    Total_mosquito_population &lt;- Susceptible_mosquito + Infectious_mosquito\n    \n    # Calculate the average force of infection imposed on each susceptible human\n    force_of_infection_on_human &lt;- bites * T_HM * Infectious_mosquito / Total_human_population\n    \n    # Calculate the average force of infection imposed on each susceptible mosquito\n    force_of_infection_on_mosquito &lt;- bites * T_MH * Infectious_human / Total_human_population\n    \n    # Calculate the (net) instantaneous change in each compartment\n    Susceptible_human_change &lt;- -force_of_infection_on_human * Susceptible_human\n    Infectious_human_change &lt;- force_of_infection_on_human * Susceptible_human - Infectious_human / infectious_period\n    Recovered_human_change &lt;- Infectious_human / infectious_period\n    Susceptible_mosquito_change &lt;- mu_M * Total_mosquito_population - (force_of_infection_on_mosquito + mu_M) * Susceptible_mosquito \n    Infectious_mosquito_change &lt;- force_of_infection_on_mosquito * Susceptible_mosquito - mu_M * Infectious_mosquito\n    \n    # Return net changes as list\n    return(list(\n      c(\n        Susceptible_human_change,\n        Infectious_human_change,\n        Recovered_human_change,\n        Susceptible_mosquito_change,\n        Infectious_mosquito_change\n      )\n    ))\n  })\n}\n\n# Solve model\nout_dengue_base &lt;- ode(y = state, times = as.numeric(times - times[1]), func = dengue_base, parms = parameters)\n\n# Plot solution\nplot(out_dengue_base, \n     main = c(\"Susceptible humans\", \"Infectious humans\", \"Recovered humans\",\n              \"Susceptible mosquitoes\", \"Infectious mosquitoes\"), \n     xlab = \"Time\", ylab = c(\"population size\"))\n\n# Convert ode output to data frame\ndengue_base_infections &lt;- as.data.frame(out_dengue_base[, c(\"time\", \"Susceptible_human\", \"Infectious_human\", \"Recovered_human\")])\n\n# Create columns for new infections and cumulative new infections, \n# Select every 7th row and calculate the difference\ndengue_base_infections &lt;- dengue_base_infections  %&gt;%\n  mutate(Susceptible_human_change = -c(0, diff(Susceptible_human)),\n         Cumulative_human_infections = cumsum(Susceptible_human_change)) %&gt;%\n  filter(time %% 7 == 0) %&gt;%\n  select(c(\"time\", \"Cumulative_human_infections\")) %&gt;%\n  mutate(Weekly_human_infections = c(0, diff(Cumulative_human_infections)))    \n\n\n# Plot solution\nplot(dengue_base_infections$time, dengue_base_infections$Weekly_human_infections, \n     xlab = \"Time\", ylab = c(\"number of infections\"),\n     main = \"Weekly human new infections\")\n\n#############################################################\n## MODELLING VECTOR-BORNE DISEASES PRACTICAL SESSION PART 2##\n#############################################################\n\n# A model for dengue transmission - Part 2\n# Some R code to numerically solve a set of ordinary differential equations\n# for a modified model of dengue. Results are then plotted.\n\n# Model parameters\nparameters &lt;- c(\n  bites = 0.63, # number of bites per mosquito per day\n  T_HM = 0.26, # probability of transmission - mosquito to human\n  T_MH = 0.26, # probability of transmission - human to mosquito\n  infectious_period = 5, # days. Duration in infectious compartment\n  mu_M = 1/14, # per day. Mosquito birth and death rate.\n  exposed_period_H = 5.5, # days. Duration in exposed compartment - human\n  exposed_period_M = 10 # days. Duration in exposed compartment - mosquito\n)\n\n# Initial conditions\nhuman_population &lt;- 150000 # population of Cairns in 2008\ninitial_human_susceptible &lt;- 149998\ninitial_human_exposed &lt;- 0\ninitial_human_infectious &lt;- 2\ninitial_human_recovered &lt;- human_population - initial_human_susceptible - initial_human_infectious - initial_human_exposed\nmosquito_population &lt;- 225000 # 3 times human population, divided by 2\ninitial_mosquito_susceptible &lt;- 224990\ninitial_mosquito_exposed &lt;- 0\ninitial_mosquito_infectious &lt;- mosquito_population - initial_mosquito_susceptible - initial_mosquito_exposed\n\n# Define model compartments, gather into a single variable to capture the state of the system and set to initial values\nstate &lt;- c(Susceptible_human = initial_human_susceptible,\n           Exposed_human = initial_human_exposed,\n           Infectious_human = initial_human_infectious,\n           Recovered_human = initial_human_recovered,\n           Susceptible_mosquito = initial_mosquito_susceptible,\n           Exposed_mosquito = initial_mosquito_exposed,\n           Infectious_mosquito = initial_mosquito_infectious)\n\n# Time window\nstart_date = as.Date(\"2008-11-02\")\nend_date = as.Date(\"2011-05-31\")\ntimes = seq(start_date, end_date, by = 1)\n\n# Model function\ndengue_with_E &lt;- function(t, state, parameters){\n  with(as.list(c(state, parameters)), {\n    # Calculate the total population sizes\n    Total_human_population &lt;- Susceptible_human + Infectious_human + Recovered_human + Exposed_human\n    Total_mosquito_population &lt;- Susceptible_mosquito + Infectious_mosquito + Exposed_mosquito\n    \n    # Calculate the average force of infection imposed on each susceptible human\n    force_of_infection_on_human &lt;- bites * T_HM * Infectious_mosquito / Total_human_population\n    \n    # Calculate the average force of infection imposed on each susceptible mosquito\n    force_of_infection_on_mosquito &lt;- bites * T_MH * Infectious_human / Total_human_population\n    \n    # Calculate the (net) instantaneous change in each compartment\n    Susceptible_human_change &lt;- -force_of_infection_on_human * Susceptible_human\n    Exposed_human_change &lt;- force_of_infection_on_human * Susceptible_human - Exposed_human / exposed_period_H\n    Infectious_human_change &lt;- Exposed_human / exposed_period_H - Infectious_human / infectious_period\n    Recovered_human_change &lt;- Infectious_human / infectious_period\n    Susceptible_mosquito_change &lt;- mu_M * Total_mosquito_population - (force_of_infection_on_mosquito + mu_M) * Susceptible_mosquito\n    Exposed_mosquito_change &lt;- force_of_infection_on_mosquito * Susceptible_mosquito - Exposed_mosquito * (1 / exposed_period_M + mu_M) \n    Infectious_mosquito_change &lt;- Exposed_mosquito / exposed_period_M - mu_M * Infectious_mosquito\n    \n    # Return net changes as list\n    return(list(\n      c(\n        Susceptible_human_change,\n        Exposed_human_change,\n        Infectious_human_change,\n        Recovered_human_change,\n        Susceptible_mosquito_change,\n        Exposed_mosquito_change,\n        Infectious_mosquito_change\n      )\n    ))\n  })\n}\n\n# Solve model\nout_dengue_with_E &lt;- ode(y = state, times = as.numeric(times - times[1]), func = dengue_with_E, parms = parameters)\n\n# Plot solution\nplot(out_dengue_with_E, \n     main = c(\"Susceptible humans\", \"Exposed humans\", \"Infectious humans\", \"Recovered humans\",\n              \"Susceptible mosquitoes\", \"Exposed mosquitoes\", \"Infectious mosquitoes\"), \n     xlab = \"Time\", ylab = c(\"population size\"))\n\n# Convert ode output to data frame\ndengue_with_E_infections &lt;- as.data.frame(out_dengue_with_E[, c(\"time\", \"Infectious_human\", \"Recovered_human\")])\n\n# Create columns for new infections and cumulative new infections, \n# Select every 7th row and calculate the difference\ndengue_with_E_infections &lt;- dengue_with_E_infections  %&gt;%\n  mutate(Infectious_human_change = c(0, diff(Infectious_human)),\n         Recovered_human_change = c(0, diff(Recovered_human)),\n         New_human_infections = Infectious_human_change + Recovered_human_change,\n         Cumulative_human_infections = cumsum(New_human_infections)) %&gt;%\n  filter(time %% 7 == 0) %&gt;%\n  select(c(\"time\", \"Cumulative_human_infections\")) %&gt;%\n  mutate(Weekly_human_infections = c(0, diff(Cumulative_human_infections)))\n\n# Plot solution\nplot(dengue_with_E_infections$time, dengue_with_E_infections$Weekly_human_infections, \n     xlab = \"Time\", ylab = c(\"number of infections\"),\n     main = \"Weekly human new infections, model with E\")",
    "crumbs": [
      "Vector-borne disease models in R"
    ]
  },
  {
    "objectID": "session8_vector_borne_modelling_in_r/session8_vector_borne_modelling_in_r.html#part-3-the-impact-of-seasonality",
    "href": "session8_vector_borne_modelling_in_r/session8_vector_borne_modelling_in_r.html#part-3-the-impact-of-seasonality",
    "title": "Vector-borne disease models in R",
    "section": "Part 3: The impact of seasonality",
    "text": "Part 3: The impact of seasonality\n\nAdding seasonality to the model\nAdding an exposed compartment reduced the number of new infections, but substantially delayed the timing of the outbreak. There is still a large assumption that we have made — that the mosquito population is constant. In tropical areas, mosquito numbers fluctuate substantially over the year, with larger numbers typically seen in the wet season, which in Cairns develops in December and lasts until March. Ndii et al. incorporated such seasonality in the mosquito death rate in their model. We apply a seasonal death rate for mosquitoes using the parameters and formula applied by Ndii et al:\n\\[death\\text{ }rate(t) = average\\text{ }death\\text{ }rate\\left(1 - amplitude * \\text{cos}\\left(\\frac{2\\pi*\\left(t + phase\\right)}{365}\\right)\\right)\\]\nAs before, you should add a heading in your file indicating that you have started a new model. For example, you could copy and paste the code chunk below into your editor to start writing your code for the new model:\n\n#############################################################\n## MODELLING VECTOR-BORNE DISEASES PRACTICAL SESSION PART 3##\n#############################################################\n\n# A model for dengue transmission - Part 3\n# Some R code to numerically solve a set of ordinary differential equations\n# for a model of dengue with an exposed period and seasonality. \n# Results are then plotted.\n\nFirst we need to define the new seasonality parameters. Copy and paste the code chunk below into your editor to continue writing your code:\n\n# Add seasonality parameters\nparameters &lt;- c(\n bites = 0.63, # number of bites per mosquito per day\n T_HM = 0.26, # probability of transmission - mosquito to human\n T_MH = 0.26, # probability of transmission - human to mosquito\n infectious_period = 5, # days. Duration in infectious compartment\n mu_M = 1/14, # per day. Mosquito birth and death rate.\n exposed_period_H = 5.5, # days. Duration in exposed compartment - human\n exposed_period_M = 10, # days. Duration in exposed compartment - mosquito\n death_amplitude = 0.6228, # from Ndii et al.\n death_phase = 20.61 # days, from Ndii et al.\n)\n\n3.1 What effect do you expect a seasonal death rate to have on the size of the mosquito population?\n\nAs well as the parameters, we also need to change our initial population numbers to reflect that when our model starts in November, the mosquito population is not at its maximum value. Copy and paste the code chunk below into your editor to define the new initial conditions and initialise the compartments:\n\n# Initial conditions\nhuman_population &lt;- 150000 # population of Cairns in 2008\ninitial_human_susceptible &lt;- 149998\ninitial_human_exposed &lt;- 0\ninitial_human_infectious &lt;- 2\ninitial_human_recovered &lt;- human_population - initial_human_susceptible - initial_human_infectious - initial_human_exposed\nmosquito_population &lt;- 110000 # around half the maximum\ninitial_mosquito_susceptible &lt;- 109990\ninitial_mosquito_exposed &lt;- 0\ninitial_mosquito_infectious &lt;- mosquito_population - initial_mosquito_susceptible - initial_mosquito_exposed\n\n# Define model compartments, gather into a single variable to capture the state of the system and set to initial values\nstate &lt;- c(Susceptible_human = initial_human_susceptible,\n           Exposed_human = initial_human_exposed,\n           Infectious_human = initial_human_infectious,\n           Recovered_human = initial_human_recovered,\n           Susceptible_mosquito = initial_mosquito_susceptible,\n           Exposed_mosquito = initial_mosquito_exposed,\n           Infectious_mosquito = initial_mosquito_infectious)\n\nWe set up times to run the model, returning to our original dates. Copy and paste the code chunk below into your editor, to continue your code:\n\n# Time window\nstart_date = as.Date(\"2008-11-02\")\nend_date = as.Date(\"2009-05-31\")\ntimes = seq(start_date, end_date, by = 1)\n\nNext, we adapt our model function to add seasonality to the mosquito death rate.Copy and paste the code chunk below into your editor to continue your code:\n\n# Model function with seasonality\ndengue_with_E_seasonal &lt;- function(t, state, parameters){\n  with(as.list(c(state, parameters)), {\n    # Calculate the total population sizes\n    Total_human_population &lt;- Susceptible_human + Infectious_human + Recovered_human + Exposed_human\n    Total_mosquito_population &lt;- Susceptible_mosquito + Infectious_mosquito + Exposed_mosquito\n    \n    # Calculate the average force of infection imposed on each susceptible human\n    force_of_infection_on_human &lt;- bites * T_HM * Infectious_mosquito / Total_human_population\n    \n    # Calculate the average force of infection imposed on each susceptible mosquito\n    force_of_infection_on_mosquito &lt;- bites * T_MH * Infectious_human / Total_human_population\n    \n    # Calculate the current seasonal death rate\n    mu_M_seasonal &lt;- mu_M * (1 - death_amplitude * cos(2 * pi * (t + death_phase) / 365))\n    \n    # Calculate the (net) instantaneous change in each compartment\n    Susceptible_human_change &lt;- -force_of_infection_on_human * Susceptible_human\n    Exposed_human_change &lt;- force_of_infection_on_human * Susceptible_human - Exposed_human / exposed_period_H\n    Infectious_human_change &lt;- Exposed_human / exposed_period_H - Infectious_human / infectious_period\n    Recovered_human_change &lt;- Infectious_human / infectious_period\n    Susceptible_mosquito_change &lt;- mu_M * Total_mosquito_population - force_of_infection_on_mosquito * Susceptible_mosquito - mu_M_seasonal * Susceptible_mosquito\n    Exposed_mosquito_change &lt;- force_of_infection_on_mosquito * Susceptible_mosquito - Exposed_mosquito / exposed_period_M - mu_M_seasonal * Exposed_mosquito \n    Infectious_mosquito_change &lt;- Exposed_mosquito / exposed_period_M - mu_M_seasonal * Infectious_mosquito\n    \n    # Return net changes as list\n    return(list(\n      c(\n        Susceptible_human_change,\n        Exposed_human_change,\n        Infectious_human_change,\n        Recovered_human_change,\n        Susceptible_mosquito_change,\n        Exposed_mosquito_change,\n        Infectious_mosquito_change\n      )\n    ))\n  })\n}\n\nWe are now ready to run the model and plot the results. Again we use a different name for the output to preserve the results from your model in Parts 1 and 2. Copy and paste the code chunk below into your editor and then run the new model parts of your file:\n\n# Solve model\nout_dengue_with_E_seasonal &lt;- ode(y = state, times = as.numeric(times - times[1]), func = dengue_with_E_seasonal, parms = parameters)\n\n# Plot solution\nplot(out_dengue_with_E_seasonal, \n     main = c(\"Susceptible humans\", \"Exposed humans\", \"Infectious humans\", \"Recovered humans\",\n              \"Susceptible mosquitoes\", \"Exposed mosquitoes\", \"Infectious mosquitoes\"), \n     xlab = \"Time\", ylab = c(\"population size\"))\n\nYour plot should look this this:\n\n\n\n\n\n\n\n\n\nCopy and paste the code below into your editor, to convert daily prevalence into weekly incidence and plot the results:\n\n# Convert ode output to data frame\ndengue_with_E_seasonal_infections &lt;- as.data.frame(out_dengue_with_E_seasonal[, c(\"time\", \"Infectious_human\", \"Recovered_human\")])\n\n# Create columns for new infections and cumulative new infections, \n# Select every 7th row and calculate the difference\ndengue_with_E_seasonal_infections &lt;- dengue_with_E_seasonal_infections  %&gt;%\n                          mutate(Infectious_human_change = c(0, diff(Infectious_human)),\n                                 Recovered_human_change = c(0, diff(Recovered_human)),\n                                 New_human_infections = Infectious_human_change + Recovered_human_change,\n                                 Cumulative_human_infections = cumsum(New_human_infections)) %&gt;%\n                          filter(time %% 7 == 0) %&gt;%\n                          select(c(\"time\", \"Cumulative_human_infections\")) %&gt;%\n                          mutate(Weekly_human_infections = c(0, diff(Cumulative_human_infections)))\n     \n# Plot solution\nplot(dengue_with_E_seasonal_infections$time, dengue_with_E_seasonal_infections$Weekly_human_infections, \n     xlab = \"Time\", ylab = c(\"number of infections\"),\n     main = \"Weekly human new infections, model with E and seasonality\")\n\n\n\n\n\n\n\n\nAs a reminder, here are the published data from Part 1:\n\n\n\n\n\n\n\n\n3.2 How do the results compare to the case data in Part 1? What might be the explanation for any differences?",
    "crumbs": [
      "Vector-borne disease models in R"
    ]
  },
  {
    "objectID": "session8_vector_borne_modelling_in_r/session8_vector_borne_modelling_in_r.html#part-3-solutions",
    "href": "session8_vector_borne_modelling_in_r/session8_vector_borne_modelling_in_r.html#part-3-solutions",
    "title": "Vector-borne disease models in R",
    "section": "Part 3: Solutions",
    "text": "Part 3: Solutions\n\nPart 3: Spoiler alertPart 3: Solutions for Part 3\n\n\nThe solutions tab contains the complete code for Parts 1, 2 and 3. Only click on it if you have tried to complete the exercises yourself and need some help\n\n\nBy the end of Part 3, your script should look like this:\n\n#############################################################\n## MODELLING VECTOR-BORNE DISEASES PRACTICAL SESSION PART 1##\n#############################################################\n\n# A model for dengue transmission - Part 1\n# Some R code to numerically solve a set of ordinary differential equations\n# for a simple model of dengue. Results are then plotted.\n\n# Library imports\nrequired_packages &lt;- (c(\"dplyr\",\n                        \"deSolve\",\n                        \"ggplot2\"))\nfor (pkg in required_packages) {\n  if (!require(pkg, character.only = TRUE)) {\n    install.packages(pkg)\n    library(pkg, character.only = TRUE)\n  }\n}\n\n# Model parameters\nparameters &lt;- c(\n  bites = 0.63, # number of bites per mosquito per day\n  T_HM = 0.26, # probability of transmission - mosquito to human\n  T_MH = 0.26, # Probability of transmission - human to mosquito \n  infectious_period = 5, # days\n  mu_M = 1/14 # Mosquito birth and death rate\n)\n\n# Time window\nstart_date = as.Date(\"2008-11-02\")\nend_date = as.Date(\"2009-05-31\")\ntimes = seq(start_date, end_date, by = 1)\n\n# Initial conditions\nhuman_population &lt;- 150000 # population of Cairns in 2008\ninitial_human_susceptible &lt;- 149998\ninitial_human_infectious &lt;- 2\ninitial_human_recovered &lt;- human_population - initial_human_susceptible - initial_human_infectious\nmosquito_population &lt;- 225000 \ninitial_mosquito_susceptible &lt;- 224990\ninitial_mosquito_infectious &lt;- mosquito_population - initial_mosquito_susceptible\n\n# Define model compartments, gather into a single variable to capture the state of the system and set to initial values\nstate &lt;- c(Susceptible_human = initial_human_susceptible,\n           Infectious_human = initial_human_infectious,\n           Recovered_human = initial_human_recovered,\n           Susceptible_mosquito = initial_mosquito_susceptible,\n           Infectious_mosquito = initial_mosquito_infectious)\n\n\n# Model function\ndengue_base &lt;- function(t, state, parameters){\n  with(as.list(c(state, parameters)), {\n    # Calculate the total population sizes\n    Total_human_population &lt;- Susceptible_human + Infectious_human + Recovered_human\n    Total_mosquito_population &lt;- Susceptible_mosquito + Infectious_mosquito\n    \n    # Calculate the average force of infection imposed on each susceptible human\n    force_of_infection_on_human &lt;- bites * T_HM * Infectious_mosquito / Total_human_population\n    \n    # Calculate the average force of infection imposed on each susceptible mosquito\n    force_of_infection_on_mosquito &lt;- bites * T_MH * Infectious_human / Total_human_population\n    \n    # Calculate the (net) instantaneous change in each compartment\n    Susceptible_human_change &lt;- -force_of_infection_on_human * Susceptible_human\n    Infectious_human_change &lt;- force_of_infection_on_human * Susceptible_human - Infectious_human / infectious_period\n    Recovered_human_change &lt;- Infectious_human / infectious_period\n    Susceptible_mosquito_change &lt;- mu_M * Total_mosquito_population - (force_of_infection_on_mosquito + mu_M) * Susceptible_mosquito \n    Infectious_mosquito_change &lt;- force_of_infection_on_mosquito * Susceptible_mosquito - mu_M * Infectious_mosquito\n    \n    # Return net changes as list\n    return(list(\n      c(\n        Susceptible_human_change,\n        Infectious_human_change,\n        Recovered_human_change,\n        Susceptible_mosquito_change,\n        Infectious_mosquito_change\n      )\n    ))\n  })\n}\n\n# Solve model\nout_dengue_base &lt;- ode(y = state, times = as.numeric(times - times[1]), func = dengue_base, parms = parameters)\n\n# Plot solution\nplot(out_dengue_base, \n     main = c(\"Susceptible humans\", \"Infectious humans\", \"Recovered humans\",\n              \"Susceptible mosquitoes\", \"Infectious mosquitoes\"), \n     xlab = \"Time\", ylab = c(\"population size\"))\n\n# Convert ode output to data frame\ndengue_base_infections &lt;- as.data.frame(out_dengue_base[, c(\"time\", \"Susceptible_human\", \"Infectious_human\", \"Recovered_human\")])\n\n# Create columns for new infections and cumulative new infections, \n# Select every 7th row and calculate the difference\ndengue_base_infections &lt;- dengue_base_infections  %&gt;%\n  mutate(Susceptible_human_change = -c(0, diff(Susceptible_human)),\n         Cumulative_human_infections = cumsum(Susceptible_human_change)) %&gt;%\n  filter(time %% 7 == 0) %&gt;%\n  select(c(\"time\", \"Cumulative_human_infections\")) %&gt;%\n  mutate(Weekly_human_infections = c(0, diff(Cumulative_human_infections)))    \n\n\n# Plot solution\nplot(dengue_base_infections$time, dengue_base_infections$Weekly_human_infections, \n     xlab = \"Time\", ylab = c(\"number of infections\"),\n     main = \"Weekly human new infections\")\n\n#############################################################\n## MODELLING VECTOR-BORNE DISEASES PRACTICAL SESSION PART 2##\n#############################################################\n\n# A model for dengue transmission - Part 2\n# Some R code to numerically solve a set of ordinary differential equations\n# for a modified model of dengue. Results are then plotted.\n\n# Model parameters\nparameters &lt;- c(\n  bites = 0.63, # number of bites per mosquito per day\n  T_HM = 0.26, # probability of transmission - mosquito to human\n  T_MH = 0.26, # probability of transmission - human to mosquito\n  infectious_period = 5, # days. Duration in infectious compartment\n  mu_M = 1/14, # per day. Mosquito birth and death rate.\n  exposed_period_H = 5.5, # days. Duration in exposed compartment - human\n  exposed_period_M = 10 # days. Duration in exposed compartment - mosquito\n)\n\n# Initial conditions\nhuman_population &lt;- 150000 # population of Cairns in 2008\ninitial_human_susceptible &lt;- 149998\ninitial_human_exposed &lt;- 0\ninitial_human_infectious &lt;- 2\ninitial_human_recovered &lt;- human_population - initial_human_susceptible - initial_human_infectious - initial_human_exposed\nmosquito_population &lt;- 225000 # 3 times human population, divided by 2\ninitial_mosquito_susceptible &lt;- 224990\ninitial_mosquito_exposed &lt;- 0\ninitial_mosquito_infectious &lt;- mosquito_population - initial_mosquito_susceptible - initial_mosquito_exposed\n\n# Define model compartments, gather into a single variable to capture the state of the system and set to initial values\nstate &lt;- c(Susceptible_human = initial_human_susceptible,\n           Exposed_human = initial_human_exposed,\n           Infectious_human = initial_human_infectious,\n           Recovered_human = initial_human_recovered,\n           Susceptible_mosquito = initial_mosquito_susceptible,\n           Exposed_mosquito = initial_mosquito_exposed,\n           Infectious_mosquito = initial_mosquito_infectious)\n\n# Time window\nstart_date = as.Date(\"2008-11-02\")\nend_date = as.Date(\"2011-05-31\")\ntimes = seq(start_date, end_date, by = 1)\n\n# Model function\ndengue_with_E &lt;- function(t, state, parameters){\n  with(as.list(c(state, parameters)), {\n    # Calculate the total population sizes\n    Total_human_population &lt;- Susceptible_human + Infectious_human + Recovered_human + Exposed_human\n    Total_mosquito_population &lt;- Susceptible_mosquito + Infectious_mosquito + Exposed_mosquito\n    \n    # Calculate the average force of infection imposed on each susceptible human\n    force_of_infection_on_human &lt;- bites * T_HM * Infectious_mosquito / Total_human_population\n    \n    # Calculate the average force of infection imposed on each susceptible mosquito\n    force_of_infection_on_mosquito &lt;- bites * T_MH * Infectious_human / Total_human_population\n    \n    # Calculate the (net) instantaneous change in each compartment\n    Susceptible_human_change &lt;- -force_of_infection_on_human * Susceptible_human\n    Exposed_human_change &lt;- force_of_infection_on_human * Susceptible_human - Exposed_human / exposed_period_H\n    Infectious_human_change &lt;- Exposed_human / exposed_period_H - Infectious_human / infectious_period\n    Recovered_human_change &lt;- Infectious_human / infectious_period\n    Susceptible_mosquito_change &lt;- mu_M * Total_mosquito_population - (force_of_infection_on_mosquito + mu_M) * Susceptible_mosquito\n    Exposed_mosquito_change &lt;- force_of_infection_on_mosquito * Susceptible_mosquito - Exposed_mosquito * (1 / exposed_period_M + mu_M) \n    Infectious_mosquito_change &lt;- Exposed_mosquito / exposed_period_M - mu_M * Infectious_mosquito\n    \n    # Return net changes as list\n    return(list(\n      c(\n        Susceptible_human_change,\n        Exposed_human_change,\n        Infectious_human_change,\n        Recovered_human_change,\n        Susceptible_mosquito_change,\n        Exposed_mosquito_change,\n        Infectious_mosquito_change\n      )\n    ))\n  })\n}\n\n# Solve model\nout_dengue_with_E &lt;- ode(y = state, times = as.numeric(times - times[1]), func = dengue_with_E, parms = parameters)\n\n# Plot solution\nplot(out_dengue_with_E, \n     main = c(\"Susceptible humans\", \"Exposed humans\", \"Infectious humans\", \"Recovered humans\",\n              \"Susceptible mosquitoes\", \"Exposed mosquitoes\", \"Infectious mosquitoes\"), \n     xlab = \"Time\", ylab = c(\"population size\"))\n\n# Convert ode output to data frame\ndengue_with_E_infections &lt;- as.data.frame(out_dengue_with_E[, c(\"time\", \"Infectious_human\", \"Recovered_human\")])\n\n# Create columns for new infections and cumulative new infections, \n# Select every 7th row and calculate the difference\ndengue_with_E_infections &lt;- dengue_with_E_infections  %&gt;%\n  mutate(Infectious_human_change = c(0, diff(Infectious_human)),\n         Recovered_human_change = c(0, diff(Recovered_human)),\n         New_human_infections = Infectious_human_change + Recovered_human_change,\n         Cumulative_human_infections = cumsum(New_human_infections)) %&gt;%\n  filter(time %% 7 == 0) %&gt;%\n  select(c(\"time\", \"Cumulative_human_infections\")) %&gt;%\n  mutate(Weekly_human_infections = c(0, diff(Cumulative_human_infections)))\n\n# Plot solution\nplot(dengue_with_E_infections$time, dengue_with_E_infections$Weekly_human_infections, \n     xlab = \"Time\", ylab = c(\"number of infections\"),\n     main = \"Weekly human new infections, model with E\")\n\n#############################################################\n## MODELLING VECTOR-BORNE DISEASES PRACTICAL SESSION PART 3##\n#############################################################\n\n# A model for dengue transmission - Part 3\n# Some R code to numerically solve a set of ordinary differential equations\n# for a model of dengue with an exposed period and seasonality. \n# Results are then plotted.\n\n# Add seasonality parameters\nparameters &lt;- c(\n  bites = 0.63, # number of bites per mosquito per day\n  T_HM = 0.26, # probability of transmission - mosquito to human\n  T_MH = 0.26, # probability of transmission - human to mosquito\n  infectious_period = 5, # days. Duration in infectious compartment\n  mu_M = 1/14, # per day. Mosquito birth and death rate.\n  exposed_period_H = 5.5, # days. Duration in exposed compartment - human\n  exposed_period_M = 10, # days. Duration in exposed compartment - mosquito\n  death_amplitude = 0.6228, # from Ndii et al.\n  death_phase = 20.61 # days, from Ndii et al.\n)\n\n# Initial conditions\nhuman_population &lt;- 150000 # population of Cairns in 2008\ninitial_human_susceptible &lt;- 149998\ninitial_human_exposed &lt;- 0\ninitial_human_infectious &lt;- 2\ninitial_human_recovered &lt;- human_population - initial_human_susceptible - initial_human_infectious - initial_human_exposed\nmosquito_population &lt;- 110000 # around half the maximum\ninitial_mosquito_susceptible &lt;- 109990\ninitial_mosquito_exposed &lt;- 0\ninitial_mosquito_infectious &lt;- mosquito_population - initial_mosquito_susceptible - initial_mosquito_exposed\n\n# Define model compartments, gather into a single variable to capture the state of the system and set to initial values\nstate &lt;- c(Susceptible_human = initial_human_susceptible,\n           Exposed_human = initial_human_exposed,\n           Infectious_human = initial_human_infectious,\n           Recovered_human = initial_human_recovered,\n           Susceptible_mosquito = initial_mosquito_susceptible,\n           Exposed_mosquito = initial_mosquito_exposed,\n           Infectious_mosquito = initial_mosquito_infectious)\n\n# Time window\nstart_date = as.Date(\"2008-11-02\")\nend_date = as.Date(\"2009-05-31\")\ntimes = seq(start_date, end_date, by = 1)\n\n# Model function with seasonality\ndengue_with_E_seasonal &lt;- function(t, state, parameters){\n  with(as.list(c(state, parameters)), {\n    # Calculate the total population sizes\n    Total_human_population &lt;- Susceptible_human + Infectious_human + Recovered_human + Exposed_human\n    Total_mosquito_population &lt;- Susceptible_mosquito + Infectious_mosquito + Exposed_mosquito\n    \n    # Calculate the average force of infection imposed on each susceptible human\n    force_of_infection_on_human &lt;- bites * T_HM * Infectious_mosquito / Total_human_population\n    \n    # Calculate the average force of infection imposed on each susceptible mosquito\n    force_of_infection_on_mosquito &lt;- bites * T_MH * Infectious_human / Total_human_population\n    \n    # Calculate the current seasonal death rate\n    mu_M_seasonal &lt;- mu_M * (1 - death_amplitude * cos(2 * pi * (t + death_phase) / 365))\n    \n    # Calculate the (net) instantaneous change in each compartment\n    Susceptible_human_change &lt;- -force_of_infection_on_human * Susceptible_human\n    Exposed_human_change &lt;- force_of_infection_on_human * Susceptible_human - Exposed_human / exposed_period_H\n    Infectious_human_change &lt;- Exposed_human / exposed_period_H - Infectious_human / infectious_period\n    Recovered_human_change &lt;- Infectious_human / infectious_period\n    Susceptible_mosquito_change &lt;- mu_M * Total_mosquito_population - force_of_infection_on_mosquito * Susceptible_mosquito - mu_M_seasonal * Susceptible_mosquito\n    Exposed_mosquito_change &lt;- force_of_infection_on_mosquito * Susceptible_mosquito - Exposed_mosquito / exposed_period_M - mu_M_seasonal * Exposed_mosquito \n    Infectious_mosquito_change &lt;- Exposed_mosquito / exposed_period_M - mu_M_seasonal * Infectious_mosquito\n    \n    # Return net changes as list\n    return(list(\n      c(\n        Susceptible_human_change,\n        Exposed_human_change,\n        Infectious_human_change,\n        Recovered_human_change,\n        Susceptible_mosquito_change,\n        Exposed_mosquito_change,\n        Infectious_mosquito_change\n      )\n    ))\n  })\n}\n\n# Solve model\nout_dengue_with_E_seasonal &lt;- ode(y = state, times = as.numeric(times - times[1]), func = dengue_with_E_seasonal, parms = parameters)\n\n# Plot solution\nplot(out_dengue_with_E_seasonal, \n     main = c(\"Susceptible humans\", \"Exposed humans\", \"Infectious humans\", \"Recovered humans\",\n              \"Susceptible mosquitoes\", \"Exposed mosquitoes\", \"Infectious mosquitoes\"), \n     xlab = \"Time\", ylab = c(\"population size\"))\n\n# Convert ode output to data frame\ndengue_with_E_seasonal_infections &lt;- as.data.frame(out_dengue_with_E_seasonal[, c(\"time\", \"Infectious_human\", \"Recovered_human\")])\n\n# Create columns for new infections and cumulative new infections, \n# Select every 7th row and calculate the difference\ndengue_with_E_seasonal_infections &lt;- dengue_with_E_seasonal_infections  %&gt;%\n  mutate(Infectious_human_change = c(0, diff(Infectious_human)),\n         Recovered_human_change = c(0, diff(Recovered_human)),\n         New_human_infections = Infectious_human_change + Recovered_human_change,\n         Cumulative_human_infections = cumsum(New_human_infections)) %&gt;%\n  filter(time %% 7 == 0) %&gt;%\n  select(c(\"time\", \"Cumulative_human_infections\")) %&gt;%\n  mutate(Weekly_human_infections = c(0, diff(Cumulative_human_infections)))\n\n# Plot solution\nplot(dengue_with_E_seasonal_infections$time, dengue_with_E_seasonal_infections$Weekly_human_infections, \n     xlab = \"Time\", ylab = c(\"number of infections\"),\n     main = \"Weekly human new infections, model with E and seasonality\")",
    "crumbs": [
      "Vector-borne disease models in R"
    ]
  },
  {
    "objectID": "session8_vector_borne_modelling_in_r/session8_vector_borne_modelling_in_r.html#part-4-interventions",
    "href": "session8_vector_borne_modelling_in_r/session8_vector_borne_modelling_in_r.html#part-4-interventions",
    "title": "Vector-borne disease models in R",
    "section": "Part 4: Interventions",
    "text": "Part 4: Interventions\n\nInterventions to control dengue\nInterventions against vector-borne diseases can take a number of different forms, because they can target the host (humans in the dengue model we have considered here) or the vector (mosquitoes in our dengue model). Interventions can also act at different stages of the vector life-cycle, for example, spraying to kill mosquito eggs before they hatch.\nIn groups of 4–6, identify interventions that could be implemented to control dengue transmission and for each of them, consider what action that intervention would have (for example, does it reduce human susceptibility to infection?). Then discuss how the model we have developed would need to be adapted to include the intervention.\nFor those wanting an extension activity, adapt the model developed in Part 3 to include these interventions, one at a time, and plot the results.\n4.1 Intervention 1: note the type of intervention, how it acts and how our model could be adapted to include it.\n\n\n\n\n4.2 Intervention 2: note the type of intervention, how it acts and how our model could be adapted to include it.\n\n\n\n\n4.3 Intervention 3: note the type of intervention, how it acts and how our model could be adapted to include it.",
    "crumbs": [
      "Vector-borne disease models in R"
    ]
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html",
    "title": "Introduction to Mathematical Modelling",
    "section": "",
    "text": "SPARK short course ‘Mathematical Modelling of Infectious Diseases’, Indonesia, March 2023\n\nThanks to Lisa White, Nuffield Department of Medicine, Oxford University and\nWirichada Pan-Ngum, Department of Tropical Hygiene, Faculty of Tropical Medicine, Mahidol University.\nAdapted and presented by Emma McBryde, Australian Institute of Tropical Health & Medicine, James Cook University July 2022\nAdapted and presented by Roslyn Hickson, College of Public Health, Medical and Veterinary Sciences, and Australian Institute of Tropical Health & Medicine, James Cook University (and CSIRO) March 2023",
    "crumbs": [
      "Introduction to Mathematical Modelling"
    ]
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#what-is-a-model",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#what-is-a-model",
    "title": "Introduction to Mathematical Modelling",
    "section": "What is a model?",
    "text": "What is a model?\n\nA simplified description of a system or process used to aid understanding \nA model is useful if it provides relevant (and correct) information for a particular purpose/question\nA model is efficient if it will do this with minimal inputs and without providing superfluous information\nMap example: https://www.thetruesize.com/",
    "crumbs": [
      "Introduction to Mathematical Modelling"
    ]
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#why-use-mathematical-models",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#why-use-mathematical-models",
    "title": "Introduction to Mathematical Modelling",
    "section": "Why use mathematical models?",
    "text": "Why use mathematical models?",
    "crumbs": [
      "Introduction to Mathematical Modelling"
    ]
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#types-of-infectious-disease-model",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#types-of-infectious-disease-model",
    "title": "Introduction to Mathematical Modelling",
    "section": "Types of infectious disease model",
    "text": "Types of infectious disease model\nCovered in this course:\n\nMechanistic models\n\nDescribe the biological mechanism in mathematical language\nCan reproduce previous trends and also predict future impacts of interventions\n\n\nNot covered in this course:\n\nEconomic models\n\nFocus on the cost specific disease burden and control\nAssess the cost-effectiveness of competing interventions\n\nBioinformatics\n\nMainly for the analysis and interpretation of genetic data\n\nStatistical models\n\nData-driven and describe historical trends and relationships such as auto-regressive models\n\nSpatial models (though they will be discussed briefly)\nFocus on spatially heterogeneous systems\n\nThere are many examples of hybrid models that span several of these categories.",
    "crumbs": [
      "Introduction to Mathematical Modelling"
    ]
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#model-complexity---or-not",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#model-complexity---or-not",
    "title": "Introduction to Mathematical Modelling",
    "section": "Model Complexity - or not!",
    "text": "Model Complexity - or not!\n\nModels should be formulated based on understanding of disease mechanisms, available information and policy questions\nModels should be as simple as possible, but no simpler \nSome models are simple but useful\nThe more functions a model performs, the more complex it becomes\nFaster processing speed, new methods and technology allow for more complexity\n\nbut this is not always superior\n\n\nAdvice: start simple and build",
    "crumbs": [
      "Introduction to Mathematical Modelling"
    ]
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#summary-1",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#summary-1",
    "title": "Introduction to Mathematical Modelling",
    "section": "Summary",
    "text": "Summary\nThis is a practical session in which, individually or as part of a group, you will simulate an epidemic using some simple apparatus. The objective of this exercise is to simulate and graphically illustrate the SIR compartmental model.",
    "crumbs": [
      "Introduction to Mathematical Modelling"
    ]
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#materials",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#materials",
    "title": "Introduction to Mathematical Modelling",
    "section": "Materials",
    "text": "Materials\n\nThree types of beans of a similar size but different colours, 20 of each type\nAn A4 piece of paper, folded in quarters in concertina style\nOne cup",
    "crumbs": [
      "Introduction to Mathematical Modelling"
    ]
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#instructions",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#instructions",
    "title": "Introduction to Mathematical Modelling",
    "section": "Instructions",
    "text": "Instructions\n\nAssign a state for each type of bean:\n\n\n\n\n\nState variable\nColour of Bean\n\n\n\n\nSusceptible (S)\n\n\n\nInfectious (I)\n\n\n\nRecovered (R)\n\n\n\n\n\nEach time step is one week. For the first time step, place 19 susceptible beans in the cup along with one infectious bean. Pour the beans in a line on your folded paper. Record your result in the table below for week 1. Check that your total population, P, remains at 20 throughout the experiment.\n\n\n\n\n\n\n\n\n\n\n\nWeek\nS\nI\nR\nP\n\n\n\n\n1\n\n\n\n\n\n\n2\n\n\n\n\n\n\n3\n\n\n\n\n\n\n4\n\n\n\n\n\n\n5\n\n\n\n\n\n\n6\n\n\n\n\n\n\n7\n\n\n\n\n\n\n8\n\n\n\n\n\n\n9\n\n\n\n\n\n\n10\n\n\n\n\n\n\n\n\nThe infectious bean can infect susceptible neighbours so replace any susceptible neighbours with infectious beans. The infectious period is one week, so keep track of the original infected bean and replace it with a recovered bean. Record the numbers of susceptible, infectious and recovered individuals in the table above for week 2.\nOnce the status of the individuals has been updated, place the beans in the cup. Then pour them out again. Replace all susceptible neighbours of infectious beans with new infectious beans (recovered beans are immune and cannot be infected). Don’t forget to replace the original infected beans with recovered beans. Record the numbers of susceptible, infectious and recovered individuals in the table above for week 3.\nRepeat until you reach 10 weeks.",
    "crumbs": [
      "Introduction to Mathematical Modelling"
    ]
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#recording-results-in-r",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#recording-results-in-r",
    "title": "Introduction to Mathematical Modelling",
    "section": "Recording results in R",
    "text": "Recording results in R\nHere is some code to record and plot your results in R. Open RStudio, open from your student files folder “session1_introduction_beans.R”. Using the Session tab, Set Working Directory / To Source File Location. Copy and paste the code chunk below into your editor. Then replace the default results with your own.\n\n# Mathematical Modelling of Infectious Diseases\n###################################################\n## INTRODUCTION TO MATHEMATICAL MODELLING PRACTICAL SESSION## \n###################################################\n\n# Record and plot simulated epidemics\n\n# create a matrix to store experimental results\nresult &lt;- matrix(NA,nrow=10,ncol=5)\n# weeks\nresult[,1]&lt;-1:10 # weeks\n\n# replace with your S count for each week\nresult[,2]&lt;-c(19, 17, 13,  9,  5,  2,  1,  1,  1,  1) # S\n\n# replace with your I count for each week\nresult[,3]&lt;-c(1, 2, 4, 4, 4, 3, 1, 0, 0, 0) # I\n\n# replace with your R count for each week\nresult[,4]&lt;-c(0,  1,  3,  7, 11, 15, 18, 19, 19, 19) # R",
    "crumbs": [
      "Introduction to Mathematical Modelling"
    ]
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#checking-results-in-r",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#checking-results-in-r",
    "title": "Introduction to Mathematical Modelling",
    "section": "Checking results in R",
    "text": "Checking results in R\n\nWrite a line of R code to calculate the sum S+I+R for each week and assign this to column 5 of the results matrix.\n\nType result[, 5] in your console. What do you see and why?",
    "crumbs": [
      "Introduction to Mathematical Modelling"
    ]
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#plotting-results-in-r",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#plotting-results-in-r",
    "title": "Introduction to Mathematical Modelling",
    "section": "Plotting results in R",
    "text": "Plotting results in R\nCopy and paste the code chunk below into your editor to plot your results:\n\nlibrary(ggplot2)\nggplot() +\n    geom_point(aes(x=result[, 1], y=result[, 3]), colour=\"red\") +\n    ggtitle(\"My simulated epidemic\") +\n    labs(x=\"Time in weeks\", y=\"I\")\n\n\n\n\n\n\n\n\n\nHow does your result differ from the above plot?\n\nWhy would we expect a different result if we did the bean counting experiment again?\n\n\nhttps://robmoss.github.io/sir-demo/",
    "crumbs": [
      "Introduction to Mathematical Modelling"
    ]
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#summary-2",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#summary-2",
    "title": "Introduction to Mathematical Modelling",
    "section": "Summary",
    "text": "Summary\nThis will be an interactive lecture session to familiarise you with some of the theory and methods for compartmental modelling. Notes appear below for your reference with a few questions thrown in.",
    "crumbs": [
      "Introduction to Mathematical Modelling"
    ]
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#the-characteristic-epidemic-curve",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#the-characteristic-epidemic-curve",
    "title": "Introduction to Mathematical Modelling",
    "section": "The characteristic epidemic curve",
    "text": "The characteristic epidemic curve\n\n4 regions: Exponential; Saturation; Decline; Post epidemic behaviour \n\n\nThinking like a mathematical modeller\n\nWhat are the mechanistic reasons for the shape?",
    "crumbs": [
      "Introduction to Mathematical Modelling"
    ]
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#the-basic-reproduction-number-r_0",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#the-basic-reproduction-number-r_0",
    "title": "Introduction to Mathematical Modelling",
    "section": "The basic reproduction number, \\(R_0\\)",
    "text": "The basic reproduction number, \\(R_0\\)\n\\(R_0\\) is defined as the average number of new infections that result from a single infection introduced into a totally susceptible population. This will depend on:\n\nThe number of contacts per unit time (e.g. week\\(^{-1}\\)), \\(c\\)\nThe probability of infection given a contact between an infectious and a susceptible individual, \\(p\\)\nThe duration of infection, \\(D\\)\n\nThe equation for the basic reproduction number is\n\\[R_0=pcD.\\]\nThe product, \\(pc\\), can be replaced by the single parameter, \\(\\beta\\), defined as the effective contact rate per unit time.",
    "crumbs": [
      "Introduction to Mathematical Modelling"
    ]
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#estimating-r_0-from-your-simulation-experiment",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#estimating-r_0-from-your-simulation-experiment",
    "title": "Introduction to Mathematical Modelling",
    "section": "Estimating \\(R_0\\) from your simulation experiment",
    "text": "Estimating \\(R_0\\) from your simulation experiment\n\nFor \\(D\\), what were the value and units for the duration of infection?\n\nFor \\(p\\), what was the probability of an infected individual (bean) infecting a susceptible neighbour?\n\nFor \\(c\\), what was the average number of contacts for each individual?\n\n\n\n\n\n\n\n\nTip\n\n\n\nDon’t forget either end of the line!\n\n\n\nExplain why the basic reproduction number is 1.9.",
    "crumbs": [
      "Introduction to Mathematical Modelling"
    ]
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#saturation",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#saturation",
    "title": "Introduction to Mathematical Modelling",
    "section": "Saturation",
    "text": "Saturation\nNot all contacts are with susceptible individuals: \n\nSome theory\n\nThe effective reproduction number \\(R_t\\) is defined as the average number of new infections caused by an infected individual at any stage during the epidemic when there will be both susceptible and recovered (thus immune) individuals present\n\\(R_t=R_0 x^∗\\) varies over time depending on the fraction of the population susceptible, \\(x^∗=\\left(\\frac{S}{pop}\\right)\\)\nIncidence of infections increases when \\(R_t&gt;1\\) and declines when \\(R_t&lt;1\\). Thus the critical proportion susceptible, \\(x^∗\\), can be calculated for \\(R_t=1\\):\n\n\\[R_t=1\\Rightarrow R_0x^∗=1 \\Rightarrow x^∗=\\frac{1}{R_0}\\]",
    "crumbs": [
      "Introduction to Mathematical Modelling"
    ]
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#implications-for-vaccination",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#implications-for-vaccination",
    "title": "Introduction to Mathematical Modelling",
    "section": "Implications for vaccination",
    "text": "Implications for vaccination\n\nCritical proportion immune or the herd immunity threshold:\n\n\\[HIT = 1-x^* \\Rightarrow HIT = 1 - \\frac{1}{R_0}\\]\n\nUsing the HIT formula, explain why a target vaccination coverage of over 50% would be sufficient to control the spread of infection in your simulated epidemic.\n\nIf the target coverage for a particular vaccine is 90%, what can you infer about the \\(R_0\\) of the pathogen in question?",
    "crumbs": [
      "Introduction to Mathematical Modelling"
    ]
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#building-models",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#building-models",
    "title": "Introduction to Mathematical Modelling",
    "section": "Building models",
    "text": "Building models\nTo design your own mathematical model you must understand\n\nThe research question\nThe natural history of the infection\nWhat data are available\n\nYou will learn to\n\nWrite the model in the form of ordinary differential equations (ODEs)\nRun the model using suitable software\n\nYou will use your model, for example to predict the effect of interventions",
    "crumbs": [
      "Introduction to Mathematical Modelling"
    ]
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#compartmental-models",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#compartmental-models",
    "title": "Introduction to Mathematical Modelling",
    "section": "Compartmental models",
    "text": "Compartmental models\n\nEach box (compartment, state) has an equation\nEach arrow (flow) has a rate \n\n\nExample: The SIRS model\n\nHas three states so has three equations\nThe rate at which susceptible individuals become infected is special because it depends on the proportion of the population that is infected at each time \\(I(t)\\)\nWe define the force of infection, \\(\\lambda(t) = \\beta I(t)/N\\), where \\(N=S(t)+I(t)+R(t)\\) is the total population size. \n\n\n\nSome definitions\nA parameter is a constant value used in the model which usually has some biological significance. For example 1/(the duration of infection) is a parameter (\\(\\nu\\))\n\nWhat is the name of another model parameter and it’s meaning?\n\n\nA variable is a value in the model that can change over time. All the states are known as state variables for this reason\n\nWhat is the name of a model variable which is not a state variable?\n\n\nPrevalence is the proportion or percentage of the population infected at any time\n\nWhat is the formula for prevalence in terms of the model states and parameters?\n\n\nIncidence is the number of new cases per unit time and is given by the rate into the infected compartment\n\\[\\text{incidence} = \\lambda(t)S(t)\\]\n\n\nModel assumptions\n\nAll models have assumptions, so what does the example SIRS model assume?\nDeterministic dynamics\n\nNo role for chance, model is ‘predetermined’\n\nPopulation is stratified in broad groups (i.e. compartments). Within each compartment, individuals are homogeneous\n\n\nWhat does this mean?\n\n\n\nHomogeneous mixing\n\n\nWhat does this mean?\n\n\n\nDynamic transmission\n\n\nWhat does this mean?\n\n\n\n\n\n\n\n\nTip\n\n\n\nThink special rates\n\n\n\nClosed population\n\n\nWhat does this mean?\n\n\n\n\nCommon model structures\n\n\nSuggest a suitable infectious disease for each of the common model structures listed below.\n\n\n\n\nModel Structure\nSuitable Infectious Disease\n\n\n\n\nSI\n\n\n\nSIS\n\n\n\nSIR\n\n\n\nSIRS\n\n\n\nSEIR\n\n\n\nSEIRS",
    "crumbs": [
      "Introduction to Mathematical Modelling"
    ]
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#building-a-compartmental-model-the-problem-for-the-week",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#building-a-compartmental-model-the-problem-for-the-week",
    "title": "Introduction to Mathematical Modelling",
    "section": "Building a compartmental model: the problem for the week",
    "text": "Building a compartmental model: the problem for the week\nWe will write a suitable model structure for COVID-19 and search the literature for data to inform parameter values and for model comparison.\nExamine the figure below and discuss amongst the group or search trusted sources to assist your answer. \n\nWhat is the most suitable structure for a COVID-19 transmission model (SI, SIS, SIR, SIRS, SEIR, SEIRS or other)?\n\nDescribe of sketch a diagram of the model structure. Include information about the compartments and the flows.",
    "crumbs": [
      "Introduction to Mathematical Modelling"
    ]
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#model-diagram",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#model-diagram",
    "title": "Introduction to Mathematical Modelling",
    "section": "Model diagram",
    "text": "Model diagram\n\nInstructions\n\nYou can draw a diagram electronically in a program such as PowerPoint, or you can draw your diagram by hand and take a photo\nSave your diagram in one of the following formats: .jpg, .gif, .png\nUpload your diagram using the Choose Files button below\n\n\n\nUpload your image\n\n\nIt is good practice to start with a simple model, that is, a model with many simplifying assumptions which means it is not very realistic. How would you change the model to make it more realistic? i.e. Is this the simplest model possible to understand the time course of an outbreak? Is this sufficiently complex to capture the key features needed to answer the question(s)?\n\n\nRefer to the chart of confirmed COVID cases in Thailand superimposed with interventions: \n\nWhat questions would a policy-maker be asking in this scenario? Comment on if and how a model could be used to answer each policy question.\n\n\n\nGood things to think about when modelling:\n\nHow sensitive are the outputs of interest to the model parameters?\u000b\n– Use sensitivity analyses, such as partial rank correlation coefficient\nWhat are the parameter values and ranges for the data? How well do we know them?\u000b\n– Bayesian inference; or if want quick and not-as-good calibration, can use a least squared error approach\nWhat are the resulting dynamics of the model?\n– Plots, summary statistics, phase plane analysis, stability analysis, bifurcation analysis, etc.",
    "crumbs": [
      "Introduction to Mathematical Modelling"
    ]
  },
  {
    "objectID": "session9_modelling_interventions_in_r/session9_modelling_interventions_in_r.html",
    "href": "session9_modelling_interventions_in_r/session9_modelling_interventions_in_r.html",
    "title": "Modelling interventions in R",
    "section": "",
    "text": "Thanks to Lisa White, Nuffield Department of Medicine, Oxford University,\nMichael Meehan, Australian Institute of Tropical Health & Medicine, James Cook University and\nWirichada Pan-Ngum, Department of Tropical Hygiene, Faculty of Tropical Medicine, Mahidol University.\nPresented by Michael Lydeamore, Department of Econometrics and Business Statistics, Monash University\n\n\n\n\n\n\n\n\nSummary\nOne of the most useful aspects of a mathematical model for infectious disease transmission is its capability to explore future intervention scenarios: what could be.\nWe will explore some R code for the 1st wave of COVID-19 in Thailand in 2020. This will involve the following parts:\n\nA whiteboard discussion of how to include interventions in a model\nCoding a model to capture the 1st wave interventions (emergency stage and curfew stage)\nEstimating the effectiveness of the 1st wave interventions\nExploring counterfactuals\nPractice building models to explicitly incorporate interventions of your choice in breakout groups\n\n\n\nModelling Interventions\nAs always, we should set up a new script with a good header:\n\n# SPARK Modelling Short course\n# 2023 Infectious Diseases Modelling\n\n##################################\n## MODELLING INTERVENTIONS IN R ##\n##################################\n\nSave this file somewhere in your student_materials folder with a meaningful name, like session_seir_ode_covid.\nWe also have to set the working directory. We can do this by pressing “To Source Location”, or using the setwd() command like we’ve done previously.\nNow, let’s load some packages.\n\nlibrary(dplyr)\nlibrary(deSolve)\nlibrary(ggplot2)\n\nWe’ll be making use of the first wave Thailand data. Here is a reminder of what the first wave in Thailand looked like:\n\nLet’s load back in the data, and have a look at a plot:\n\nfirst_wave &lt;- read.csv(\"first_wave_TH.csv\", colClasses = c(\"Date\", \"numeric\", \"numeric\"))\nfirst_wave$Date &lt;- as.Date(first_wave$Date, format = \"%Y-%m-%d\")\n\nggplot(first_wave, aes(x = Date, y = Cases)) +\n    geom_col(fill = \"blue\") +\n    ylab(\"Daily cases\") +\n    xlab(\"\") +\n    ggtitle(\"Thailand's First Wave, Jan-Jun 2020\") +\n    theme_bw()\n\n\n\n\n\n\n\n\n\n\nCoding Interventions\nWe’re going to model two interventions: the emergency declaration, which was made on March 26, and the start of curfew, which was on March 4th.\n\nfitting_start_date &lt;- as.Date(\"2020-03-07\") # start of fitting window\nemergency_start_date &lt;- as.Date(\"2020-03-26\") # Start of Emergency declaration\ncurfew_start_date &lt;- as.Date(\"2020-04-03\") # Start of Curfew\nfitting_end_date &lt;- as.Date(\"2020-05-13\") # end of fitting window\n\nWe should filter down our data to the time period we want to fit to.\n\noutbreak &lt;- first_wave %&gt;%\n    filter(Date &gt;= fitting_start_date, Date &lt;= fitting_end_date)\n\nOne of the most important things when you’re doing an optimisation is a decent initial guess at your parameter values. Luckily, in a previous session, we got a good estimate of R0, and we know a few things about how effective the various interventions might be.\n\nparameters &lt;- c(\n    R0 = 3.970588, # from the NM fitting session\n    latent_period = 5, # Rounded from Trauer, J.M., Lydeamore, M.J., Dalton, G.W. et al. Understanding how Victoria, Australia gained control of its second COVID-19 wave. Nat Commun 12, 6266 (2021). https://doi.org/10.1038/s41467-021-26558-4\n    infectious_period = 6, # Rounded from Trauer et al\n    emergency_efficacy = 0.70, # guess, assuming Reff = (1-efficacy) * R0\n    curfew_efficacy = 0.80 # guess\n)\n\nSince we’re using the same model from Sessions 4 and 5, we also need the same initial conditions, state variables and time window.\n\n# Initial conditions\nTotal_population &lt;- 6.6e7 # Roughly population of Thailand\nInitial_exposed &lt;- 0 # Simplifying assumption\nInitial_infectious &lt;- 30.356868 # from the NM fitting session\nInitial_recovered &lt;- 0 # simplifying assumption\nInitial_susceptible &lt;- Total_population - Initial_exposed - Initial_infectious - Initial_recovered\n\n\n# State variables\nstate &lt;- c(\n    Susceptible = Initial_susceptible,\n    Exposed = Initial_exposed,\n    Infectious = Initial_infectious,\n    Recovered = Initial_recovered\n)\n\n# Time window\ntimes &lt;- seq(fitting_start_date, fitting_end_date, by = 1)\n\nWe’re going to use a slightly different implementation of the SEIR model from the previous session. See if you can spot the differences.\n\nCOVID.intervention &lt;- function(t, state, parameters) {\n    with(as.list(c(state, parameters)), {\n\n        # Calculate the total population size\n        Total_population &lt;- Susceptible + Exposed + Infectious + Recovered\n\n        # Calculate intervention efficacy\n        if (t &lt; as.numeric(emergency_start_date - fitting_start_date)) {\n            intervention_efficacy &lt;- 0\n        } else if (t &gt;= as.numeric(emergency_start_date - fitting_start_date) &&\n            t &lt; as.numeric(curfew_start_date - fitting_start_date)) {\n            intervention_efficacy &lt;- emergency_efficacy\n        } else {\n            intervention_efficacy &lt;- curfew_efficacy\n        }\n\n        # Calculate the effective reproduction number in the presence of interventions\n        Reff &lt;- (1 - intervention_efficacy) * R0 # assuming everyone starts susceptible\n\n        # Calculate the average force of infection imposed on each susceptible individual\n        force_of_infection &lt;- Reff * Infectious / (Total_population * infectious_period)\n\n        # Calculate the net (instantaneous) change in each state variable\n        Susceptible_change &lt;- -force_of_infection * Susceptible\n        Exposed_change &lt;- force_of_infection * Susceptible - Exposed / latent_period\n        Infectious_change &lt;- Exposed / latent_period - Infectious / infectious_period\n        Recovered_change &lt;- Infectious / infectious_period\n\n        # Return net changes as list\n        return(list(\n            c(\n                Susceptible_change,\n                Exposed_change,\n                Infectious_change,\n                Recovered_change\n            )\n        ))\n    })\n}\n\nWhat is different for this implementation compared to the implementation in session 4? Why?\n\nNow, we wrap this function in a call to ode to solve our model, and give us the outputs we are interested in.\n\n# Wrapper function to solve model and tidy up output\nsolve.intervention.model &lt;- function(y_ = state,\n                                     times_ = times,\n                                     func. = COVID.intervention,\n                                     parms_ = parameters) {\n    out &lt;- ode(\n        y = y_,\n        times = as.numeric(times_ - times_[1]),\n        func = func.,\n        parms = parms_\n    )\n\n    # Calculate the prevalence, incidence and cumulative incidence (for comparison with data)\n    out &lt;- as.data.frame(out) %&gt;%\n        mutate(\n            Incidence = Exposed / parms_[\"latent_period\"],\n            Cumulative_incidence = cumsum(Incidence) + Incidence[1],\n            Population = Susceptible + Exposed + Infectious + Recovered,\n            Prevalence = (Exposed + Infectious)/Population,\n            Date = times_\n        )\n\n    return(as.data.frame(out))\n}\n\nWe can solve this for our initial guess parameters, and see how it looks\n\n# Run the model for out initial set of parameters\nout_init &lt;- solve.intervention.model()\n\n\n# Make sure to add observational uncertainty\nout_init &lt;- out_init %&gt;%\n    mutate(\n        lower50 = qpois(p = 0.25, lambda = Incidence), # 50% confidence interval (i.e., 25 - 75th centiles)\n        upper50 = qpois(p = 0.75, lambda = Incidence),\n        lower95 = qpois(p = 0.025, lambda = Incidence), # 95% confidence interval (i.e., 2.5 - 97.5th centiles)\n        upper95 = qpois(p = 0.975, lambda = Incidence)\n    )\n\n# Plot initial estimate\nggplot(outbreak) +\n    geom_col(aes(x = Date, y = Cases), width = 1, fill = \"dodgerblue2\", colour = \"blue\") +\n    geom_ribbon(\n        data = out_init[-1, ], aes(x = Date, ymin = lower50, ymax = upper50),\n        fill = \"firebrick2\", colour = \"firebrick2\", alpha = 0.8\n    ) +\n    geom_ribbon(\n        data = out_init[-1, ], aes(x = Date, ymin = lower95, ymax = upper95),\n        fill = \"firebrick2\", colour = \"firebrick2\", alpha = 0.5\n    ) +\n    ylab(\"Daily cases\") +\n    xlab(\"\") +\n    ggtitle(\"Thailand's First Wave, 2020\") +\n    theme_bw()\n\n\n\n\n\n\n\n\nNot bad! What do you observe? Why do you think this might be, and how can the fit be improved?\n\n\n\nModel calibration\nSo we have written code that can solve our model for a given set of parameters. Now, just like we did last time, we can use maximum likelihood estimation to determine the optimal parameters for our model.\n\n\n\n\n\n\nParameter scaling\n\n\n\nOptimisation algorithms rely on parameters being able to take on any value (i.e. \\((-\\infty, \\infty)\\))\n\n\nOur effectiveness parameters are defined as “reductions in transmission”, which means they are bounded between 0 and 1. To put them in the form the optimiser is expecting, we’ll use the logit transform.\n\nlogit &lt;- function(x) {\n    return(log(x / (1 - x)))\n}\n\n# And its inverse\ninverse.logit &lt;- function(x) {\n    return(exp(x) / (1 + exp(x)))\n}\n\nAnd now we’re ready to write our negative log likelihood function.\n\nnegative.log.likelihood &lt;- function(transformed_parameters, # assumes logit form of parameters -- per Wednesday arvo session\n                                    data = outbreak$Cases[-1],\n                                    state_ = state,\n                                    times_ = times,\n                                    func. = COVID.intervention, # note this is our ode solver\n                                    parms_base = parameters) {\n\n    # Back-transform model parameters (inverse logit)\n    parms_base[c(\"emergency_efficacy\", \"curfew_efficacy\")] &lt;-\n        inverse.logit(transformed_parameters[c(\"emergency_efficacy\", \"curfew_efficacy\")])\n\n    # Solve model with updated parameters\n    out &lt;- solve.intervention.model(\n        state_,\n        times_,\n        func.,\n        parms_base\n    )\n\n    return(-sum(dpois(\n        x = data,\n        lambda = out$Incidence[-1],\n        log = TRUE\n    ))) # Poisson observation model\n}\n\nThe complicated part of this is transforming back and forth between the logit-transformed parameters, and the “actual” parameters that we care about. We have to make sure to transform before we start.\n\ninit_parameters &lt;- c(logit(parameters[c(\n    \"emergency_efficacy\",\n    \"curfew_efficacy\"\n)]))\n\n# Calculate initial negative log-likelihood\nnegative.log.likelihood(init_parameters)\n\n[1] 1865.599\n\nnegative_log_likelihood_initial &lt;- -sum(dpois(\n    x = outbreak$Cases[-1],\n    lambda = out_init$Incidence[-1], # This is from the previous section!\n    log = TRUE\n))\nnegative_log_likelihood_initial\n\n[1] 1865.599\n\n\nNow we’re in a place to use optim again, just like we’ve done previously.\n\noptim_NM &lt;- optim(\n    par = init_parameters,\n    fn = negative.log.likelihood,\n    method = \"Nelder-Mead\",\n    hessian = TRUE\n)\n\n# Check for convergence\noptim_NM$convergence # 0 - converged; nonzero - failed\n\n[1] 0\n\n# Back-transform parameters\nc(inverse.logit(optim_NM$par[c(\n    \"emergency_efficacy\",\n    \"curfew_efficacy\"\n)]))\n\nemergency_efficacy    curfew_efficacy \n         0.7907816          0.9164450 \n\n# Inspect the optimal negative log-likelihood\noptim_NM$value\n\n[1] 372.4239\n\n\nThis looks pretty good, and so we can be reasonably happy we’ve reached an optimal solution. Now that we have a solution, let’s plot it.\n\noptimal_parameters &lt;- parameters\noptimal_parameters[c(\n    \"emergency_efficacy\",\n    \"curfew_efficacy\"\n)] &lt;- inverse.logit(optim_NM$par[c(\n    \"emergency_efficacy\",\n    \"curfew_efficacy\"\n)])\n\n\n\n# Solve the model given the optimal parameters and initial conditions\noptimal_solution &lt;- solve.intervention.model(\n    y_ = state,\n    times_ = times,\n    func. = COVID.intervention,\n    parms = optimal_parameters\n)\n\n\n# Calculate the observational confidence intervals\noptimal_solution &lt;- optimal_solution %&gt;%\n    mutate(\n        lower50 = qpois(p = 0.25, lambda = Incidence), # 50% confidence interval (i.e., 25 - 75th centiles)\n        upper50 = qpois(p = 0.75, lambda = Incidence),\n        lower95 = qpois(p = 0.025, lambda = Incidence), # 95% confidence interval (i.e., 2.5 - 97.5th centiles)\n        upper95 = qpois(p = 0.975, lambda = Incidence)\n    )\n\nggplot(outbreak) +\n    geom_col(\n        aes(x = Date, y = Cases),\n        width = 1.0,\n        fill = \"dodgerblue2\",\n        colour = \"blue\"\n    ) +\n    geom_ribbon(\n        data = optimal_solution[-1, ],\n        aes(x = Date, ymin = lower50, ymax = upper50),\n        fill = \"firebrick2\", colour = \"firebrick2\", alpha = 0.8\n    ) +\n    geom_ribbon(\n        data = optimal_solution[-1, ],\n        aes(x = Date, ymin = lower95, ymax = upper95),\n        fill = \"firebrick2\", colour = \"firebrick2\", alpha = 0.5\n    ) +\n    ylab(\"Daily cases\") +\n    xlab(\"\") +\n    ggtitle(\"Intervention model fit (optimized)\") +\n    geom_vline(\n        aes(xintercept = emergency_start_date),\n        linetype = \"dashed\"\n    ) +\n    geom_vline(\n        aes(xintercept = curfew_start_date),\n        linetype = \"dashed\"\n    ) +\n    annotate(\n        geom = \"text\",\n        label = c(\"lockdown\", \"Curfew\"),\n        x = c(emergency_start_date, curfew_start_date),\n        y = c(175, 175),\n        angle = 90,\n        vjust = 1.5\n    ) +\n    theme_bw()\n\n\n\n\n\n\n\n\nGreat! The fit looks reasonable, at least visually. To report on parameter uncertainty, we use the same tricks as last time, with the square root of the diagonals of the hessian matrix.\n\ncovar_matrix &lt;- solve(optim_NM$hessian)\nstd_errors &lt;- sqrt(diag(covar_matrix))\nestimates_transformed &lt;- data.frame(\n    estimate = optim_NM$par,\n    std_error = std_errors\n) %&gt;%\n    dplyr::mutate(\n        lower95CI = estimate - 1.96 * std_error,\n        upper95CI = estimate + 1.96 * std_error\n    )\nestimates_transformed\n\n                   estimate  std_error lower95CI upper95CI\nemergency_efficacy 1.329643 0.05962182  1.212785  1.446502\ncurfew_efficacy    2.394996 0.04658667  2.303686  2.486306\n\n# Back-transform estimates and confidence intervals\nestimates &lt;- inverse.logit(estimates_transformed[, -2])\nestimates\n\n                    estimate lower95CI upper95CI\nemergency_efficacy 0.7907816 0.7707913 0.8094595\ncurfew_efficacy    0.9164450 0.9091819 0.9231762\n\n\nWhat do you see in these plots and estimates?\n\nWhich type of uncertainty does this capture? What other types of uncertainty should we consider?\n\n\n\nExploring counterfactuals\nNow we have a model for the COVID-19 transmission in Thailand, and we have estimates of how effective the two stages of interventions were (emergency and curfew), we can now explore what could have happened, or the counterfactuals.\nWhat could have happened if no intervention was applied?\n\nWhat could have happened if we started the emergency stage earlier?\n\nWhat other interesting counterfactual scenarios could we explore?\n\nWhich of the scenarios you suggested previously might be of interest to the general public and why? Would the scenarios of interest to decision makers be different? If so, how and why?",
    "crumbs": [
      "Modelling interventions in R"
    ]
  },
  {
    "objectID": "session7_vector_borne_modelling/session7_vector_borne_modelling.html",
    "href": "session7_vector_borne_modelling/session7_vector_borne_modelling.html",
    "title": "Vector-borne disease modelling",
    "section": "",
    "text": "SPARK short course ‘Mathematical Modelling of Infectious Diseases’, Indonesia, March 2023\n\nDeveloped and presented by Trish Campbell, The University of Melbourne at The Peter Doherty Institute for Infection and Immunity",
    "crumbs": [
      "Vector-borne disease modelling"
    ]
  },
  {
    "objectID": "session7_vector_borne_modelling/session7_vector_borne_modelling.html#part-1-motivation-and-examples",
    "href": "session7_vector_borne_modelling/session7_vector_borne_modelling.html#part-1-motivation-and-examples",
    "title": "Vector-borne disease modelling",
    "section": "Part 1: Motivation and examples",
    "text": "Part 1: Motivation and examples\n\nWhat are vector-borne diseases?\nUnlike diseases that spread directly from person to person, vector-borne diseases are those diseases in which the spread of an infectious pathogen occurs via a vector — a living organism such as a mosquito. Examples of vectors include (left to right) mosquitoes, ticks, blackflies and fleas:\n\n   \n\n\n\nExamples of vector-borne diseases and vectors that spread them\nThere are many different types of vector. While some diseases, such as malaria, are exclusively spread by a single vector genus, others, such as lymphatic filariasis, can be transmitted by multiple species. Similarly, some vectors are able to spread multiple diseases.\n\n\n\n\n\nVector\nDisease\n\n\n\n\nMosquito - Anopheles\nMalaria, Lymphatic filariasis\n\n\nMosquito - Aedes\nZika, Dengue, Lymphatic filariasis\n\n\nMosquito - Culex\nWest Nile fever, Japanese encephalitis, Lymphatic filariasis\n\n\nBlackflies\nOnchocerciasis\n\n\n\n\n\nSource:  https://www.who.int/news-room/fact-sheets/detail/vector-borne-diseases \n\n\n1.1 Do you know which of these vector-borne diseases is important to your country? Are there any others?\n\n\n\n\n\n\nHow do vector-borne diseases spread?\nBelow are diagrams showing the transmission cycles for two vector-borne diseases: Onchocerciasis (top) and West Nile fever, caused by infection with West Nile virus (bottom).\n\n\n\n\n\n\n\n\nSource:  https://www.cdc.gov/dpdx/onchocerciasis/index.html\n\n\n\n\n\n\n\n\n\n\nSource:  https://www.cdc.gov/westnile/transmission/index.html \n\n\n\n\n1.2 What type of vector is responsible for the spread of onchocerciasis?\n\n\n\n\n1.3 What type of vector is responsible for the spread of West Nile virus?\n\n\n\n\n1.4 What is the main difference you notice between these two transmission cycles?\n\n\n\n\nWe can divide vector-borne diseases into two categories, those that spread by a human-vector-human cycle (e.g. malaria, dengue, zika, onchocerciasis) and those that involve a non-human host (e.g. West Nile virus, Japanese encephalitis). In this session, we will only be working with diseases that spread by a human-vector-human cycle.\n\n\nBurden of disease\nDiseases spread by vectors account for almost one-fifth of all infectious diseases and are responsible for more than 700,000 deaths annually. Much of this disease burden is due to malaria and dengue infections, estimated to cause more than 440,000 deaths per year. The map below displays the distribution of deaths due to vector-borne diseases, estimated by the World Health Organization in 2002. While Africa has the highest burden, there is substantial burden in the Asia Pacific region. As global temperatures increase, the global distribution of vectors is changing, which may allow the spread of vector-borne diseases into new areas.\n\n\n\nSource:  https://doi.org/10.1016/B978-0-12-384890-1.00015-7 \n\n\nHow can modelling help?\n1.5 What are some ways that modelling might be used to help reduce the burden of vector-borne infectious diseases?",
    "crumbs": [
      "Vector-borne disease modelling"
    ]
  },
  {
    "objectID": "session7_vector_borne_modelling/session7_vector_borne_modelling.html#part-1-solutions",
    "href": "session7_vector_borne_modelling/session7_vector_borne_modelling.html#part-1-solutions",
    "title": "Vector-borne disease modelling",
    "section": "Part 1: Solutions",
    "text": "Part 1: Solutions\n\nPart 1: Spoiler alertPart 1: Solutions for Part 1\n\n\nThe solutions tab contains suggested answers for Part 1. Only click on it if you have tried to complete the exercises yourself and need some help\n\n\n\nWhat are vector-borne diseases?\nUnlike diseases that spread directly from person to person, vector-borne diseases are those diseases in which the spread of an infectious pathogen occurs via a vector — a living organism such as a mosquito. Examples of vectors include (left to right) mosquitoes, ticks, blackflies and fleas:\n\n   \n\n\n\nExamples of vector-borne diseases and vectors that spread them\nThere are many different types of vector. While some diseases, such as malaria, are exclusively spread by a single vector genus, others, such as lymphatic filariasis, can be transmitted by multiple species. Similarly, some vectors are able to spread multiple diseases.\n\n\n\n\n\nVector\nDisease\n\n\n\n\nMosquito - Anopheles\nMalaria, Lymphatic filariasis\n\n\nMosquito - Aedes\nZika, Dengue, Lymphatic filariasis\n\n\nMosquito - Culex\nWest Nile fever, Japanese encephalitis, Lymphatic filariasis\n\n\nBlackflies\nOnchocerciasis\n\n\n\n\n\nSource:  https://www.who.int/news-room/fact-sheets/detail/vector-borne-diseases \n\n\n1.1 Do you know which of these vector-borne diseases is important to your country? Are there any others?\nOthers might include leishmaniasis, ricksettial diseases\n\n\n\n\n\nHow do vector-borne diseases spread?\nBelow are diagrams showing the transmission cycles for two vector-borne diseases: Onchocerciasis (top) and West Nile fever, caused by infection with West Nile virus (bottom).\n\n\n\n\n\n\n\n\nSource:  https://www.cdc.gov/dpdx/onchocerciasis/index.html\n\n\n\n\n\n\n\n\n\n\nSource:  https://www.cdc.gov/westnile/transmission/index.html \n\n\n\n\n1.2 What type of vector is responsible for the spread of onchocerciasis?\nBlackfly\n\n\n\n1.3 What type of vector is responsible for the spread of West Nile virus?\nMosquito\n\n\n\n1.4 What is the main difference you notice between these two transmission cycles?\nWNV includes non-human hosts\n\n\n\nWe can divide vector-borne diseases into two categories, those that spread by a human-vector-human cycle (e.g. malaria, dengue, zika, onchocerciasis) and those that involve a non-human host (e.g. West Nile virus, Japanese encephalitis). In this session, we will only be working with diseases that spread by a human-vector-human cycle.\n\n\nBurden of disease\nDiseases spread by vectors account for almost one-fifth of all infectious diseases and are responsible for more than 700,000 deaths annually. Much of this disease burden is due to malaria and dengue infections, estimated to cause more than 440,000 deaths per year. The map below displays the distribution of deaths due to vector-borne diseases, estimated by the World Health Organization in 2002. While Africa has the highest burden, there is substantial burden in the Asia Pacific region. As global temperatures increase, the global distribution of vectors is changing, which may allow the spread of vector-borne diseases into new areas.\n\n\n\nSource:  https://doi.org/10.1016/B978-0-12-384890-1.00015-7 \n\n\nHow can modelling help?\n1.5 What are some ways that modelling might be used to help reduce the burden of vector-borne infectious diseases?\nForecast likely cases in order to scale up necessary treatments; help understand the factors that are important to spread; investigate the types of interventions that might help to control transmission; inform decisions of policy-makers",
    "crumbs": [
      "Vector-borne disease modelling"
    ]
  },
  {
    "objectID": "session7_vector_borne_modelling/session7_vector_borne_modelling.html#part-2-elements-of-vector-borne-disease-models",
    "href": "session7_vector_borne_modelling/session7_vector_borne_modelling.html#part-2-elements-of-vector-borne-disease-models",
    "title": "Vector-borne disease modelling",
    "section": "Part 2: Elements of vector-borne disease models",
    "text": "Part 2: Elements of vector-borne disease models\n\nPurpose\nIn this part of the session, we will consider the mechanistic process by which vector-borne diseases spread and consider the other elements that are needed in vector-borne disease models.\n\n\nSimplified spread of a mosquito-borne disease\nWhile there are many different types of vectors, in this and the following part we will cover modelling of diseases that are spread by mosquitoes. Female mosquitoes bite humans to obtain protein from blood for their developing eggs. These bites can transmit infection from mosquito to human or from human to mosquito. The following diagram outlines a simple transmission cycle of a mosquito-borne disease:\n\n\n\n\n\n\n\n\nThe steps involved in transmission, as indicated on the diagram above are:\n\nA susceptible mosquito bites an infectious human.\nInfection is successfully transmitted to the mosquito. The pathogen multiplies within the mosquito. The mosquito is now infectious, and capable of transmitting disease.\nThe infectious mosquito bites a susceptible human.\nInfection is successfully transmitted to the human. The pathogen multiplies within the human. The human is now infectious, and capable of transmitting disease.\n\nYou might notice that in our diagram above both humans and mosquitoes are infectious immediately upon being infected. In reality, it takes time for the infectious load to build in a host before they are capable of transmitting infection. We make this assumption here to simplify the explanation of the transmission process.\n\n\nRecovery from infection\nFor the model that we are building in this session, we will assume that:\n\nInfectious humans recover at a rate that is the reciprocal of their infectious period.\nOnce an infectious human recovers, they are immune for the remainder of their life.\nMosquitoes, once infected, remain infectious for the rest of their life.\n\n\n\n\n2.1 Based on the diagram and assumptions above, what compartments would be required to model the human population? Use the subscript H to indicate that these are human compartments.\n\n\n\n\n2.2 Based on the diagram and assumptions above, what compartments would be required to model the mosquito population? Use the subscript M to indicate that these are mosquito compartments.\n\n\n\n\n\n\nHuman and mosquito populations interact through bites\nThe feature that makes vector-borne disease models different to models for diseases spread by direct contact is that the human and mosquito populations interact through bites. We start with the assumption that each mosquito makes a fixed number of bites per unit time, and we define this as \\(b\\). We further assume that those bites are uniformly spread across the human population, \\(N_H\\). It follows that the rate at which a specific human is bitten by a specific mosquito, which we define as \\(r\\), can be calculated as:\n\\[r=\\frac{b}{N_H}\\]\nThis is the number of bites a single human receives from a single mosquito per unit time, and is analogous to ‘contact’ in directly-transmitted disease models.\n2.3 What happens to the rate \\(r\\) as the human population increases? What do you think might be the implication for transmission?\n\n\n\n\n\n\nProbability of successful transmission\nSimilar to contacts in the case of directly transmitted (human to human) infections, not all mosquito bites will be of sufficient intensity to transmit infection. For each bite, we assign a probability that the bite is of sufficient intensity to transmit infection (if one host is susceptible and the other infectious), using the following notation:\n\n\\(T_{HM}\\) is the probability that an infectious mosquito biting a human transmits infection to the human\n\\(T_{MH}\\) is the probability that an infectious human being bitten by a susceptible mosquito transmits infection to the mosquito\n\nWe refer to this as the probability of successful transmission.\n2.4 Write the expression for the number of bites a single human receives from a single mosquito per unit time that are capable of transmitting infection from mosquito to human.\n\n\n\n\n2.5 Write the expression for the number of bites a single human receives from a single mosquito per unit time that are capable of transmitting infection from human to mosquito.\n\n\n\n\n\n\nForce of infection on humans \\((λ_H)\\) and on mosquitoes \\((λ_M)\\)\nThe expressions in 2.4 and 2.5 are for the rate of ‘successful’ bites between a single susceptible human and a single infectious mosquito. The force of infection on humans, \\(λ_H\\), is the rate at which a susceptible human acquires infection, noting that infection can be acquired from any infectious mosquito.\n2.6 Write the expression for the force of infection on humans, \\(λ_H\\).\n\n\n\n\nSimilarly the force of infection on mosquitoes, \\(λ_M\\), is the rate at which a susceptible mosquito acquires infection. A mosquito can acquire infection from any infectious human.\n2.7 Write the expression for the force of infection on mosquitoes, \\(λ_M\\).\n\n\n\n\n\n\nNew infections per unit time\nThe force of infection (on humans or mosquitoes) is the rate at which infection is acquired in a single susceptible host. To calculate the rate that new infections occur in the whole human or mosquito population, we have to multiply the force of infection by the population at risk of being infected.\n2.8 Using the equation for the force of infection on humans, \\(λ_H\\), write the expression for the total number of human infections per unit time.\n\n\n\n\n2.9 Using the equation for the force of infection on mosquitoes, \\(λ_M\\), write the expression for the total number of mosquito infections per unit time.\n\n\n\n\n\n\nBirths and deaths\n\nTypically the demographic processes of mosquitoes (births, deaths) occur on a much shorter time scale than the same processes for humans — mosquitoes may live a few weeks whereas humans live for decades.\nDepending on the time over which the model will be run to answer the research question, it is common for mosquito births and deaths to be included in a model while human births and deaths are omitted.\nTo maintain a constant population in a model, we set the birth rates and the death rates to be equal.\nIn the model we are building in this session, we will ignore human births and deaths and maintain a constant mosquito population.\nIn the model we are building in this session, all new members of the population are born susceptible to the modelled disease.\n\n\n\nOther modelling considerations\n\nMany of the processes affecting the life cycle of mosquitoes are highly climate dependent and so vary seasonally. For the purposes of illustration, we will not include seasonality in our model.\nAs we saw when we compared the transmission cycle for onchocerciasis with the transmission cycle of West Nile virus, for some vector-borne diseases vertebrate hosts other than humans are involved. As this adds substantial complexity to the model, in this session we consider only diseases that spread human-vector-human.\nWhile we have assumed a constant probability across the whole population that a bite will result in transmission, in reality this may not be the case due to population heterogeneity. Comparing the force of infection measured in humans to the measured entomological inoculation rate (EIR), which is the average number of infectious bites per human per unit time, can help calibrate models to real data.",
    "crumbs": [
      "Vector-borne disease modelling"
    ]
  },
  {
    "objectID": "session7_vector_borne_modelling/session7_vector_borne_modelling.html#part-2-solutions",
    "href": "session7_vector_borne_modelling/session7_vector_borne_modelling.html#part-2-solutions",
    "title": "Vector-borne disease modelling",
    "section": "Part 2: Solutions",
    "text": "Part 2: Solutions\n\nPart 2: Spoiler alertPart 2: Solutions for Part 2\n\n\nThe solutions tab contains solutions for Part 2. Only click on it if you have tried to complete the exercises yourself and need some help\n\n\n\nPurpose\nIn this part of the session, we will consider the mechanistic process by which vector-borne diseases spread and consider the other elements that are needed in vector-borne disease models.\n\n\nSimplified spread of a mosquito-borne disease\nWhile there are many different types of vectors, in this and the following part we will cover modelling of diseases that are spread by mosquitoes. Female mosquitoes bite humans to obtain protein from blood for their developing eggs. These bites can transmit infection from mosquito to human or from human to mosquito. The following diagram outlines a simple transmission cycle of a mosquito-borne disease:\n\n\n\n\n\n\n\n\nThe steps involved in transmission, as indicated on the diagram above are:\n\nA susceptible mosquito bites an infectious human.\nInfection is successfully transmitted to the mosquito. The pathogen multiplies within the mosquito. The mosquito is now infectious, and capable of transmitting disease.\nThe infectious mosquito bites a susceptible human.\nInfection is successfully transmitted to the human. The pathogen multiplies within the human. The human is now infectious, and capable of transmitting disease.\n\nYou might notice that in our diagram above both humans and mosquitoes are infectious immediately upon being infected. In reality, it takes time for the infectious load to build in a host before they are capable of transmitting infection. We make this assumption here to simplify the explanation of the transmission process.\n\n\nRecovery from infection\nFor the model that we are building in this session, we will assume that:\n\nInfectious humans recover at a rate that is the reciprocal of their infectious period.\nOnce an infectious human recovers, they are immune for the remainder of their life.\nMosquitoes, once infected, remain infectious for the rest of their life.\n\n\n\n\n2.1 Based on the diagram and assumptions above, what compartments would be required to model the human population? Use the subscript H to indicate that these are human compartments.\n\\(S_H, I_H, R_H\\)\n\n\n\n2.2 Based on the diagram and assumptions above, what compartments would be required to model the mosquito population? Use the subscript M to indicate that these are mosquito compartments.\n\\(S_M, I_M\\)\n\n\n\n\n\nHuman and mosquito populations interact through bites\nThe feature that makes vector-borne disease models different to models for diseases spread by direct contact is that the human and mosquito populations interact through bites. We start with the assumption that each mosquito makes a fixed number of bites per unit time, and we define this as \\(b\\). We further assume that those bites are uniformly spread across the human population, \\(N_H\\). It follows that the rate at which a specific human is bitten by a specific mosquito, which we define as \\(r\\), can be calculated as:\n\\[r=\\frac{b}{N_H}\\]\nThis is the number of bites a single human receives from a single mosquito per unit time, and is analogous to ‘contact’ in directly-transmitted disease models.\n2.3 What happens to the rate \\(r\\) as the human population increases? What do you think might be the implication for transmission?\nIt reduces as the same number of bites are spread over more people. This makes it less likely that a human will be bitten the two times necessary in the required timeframe in order to continue transmission (i.e. once to be infected by an infectious mosquito and then by a susceptible mosquito to infect them.\n\n\n\n\n\nProbability of successful transmission\nSimilar to contacts in the case of directly transmitted (human to human) infections, not all mosquito bites will be of sufficient intensity to transmit infection. For each bite, we assign a probability that the bite is of sufficient intensity to transmit infection (if one host is susceptible and the other infectious), using the following notation:\n\n\\(T_{HM}\\) is the probability that an infectious mosquito biting a human transmits infection to the human\n\\(T_{MH}\\) is the probability that an infectious human being bitten by a susceptible mosquito transmits infection to the mosquito\n\nWe refer to this as the probability of successful transmission.\n2.4 Write the expression for the number of bites a single human receives from a single mosquito per unit time that are capable of transmitting infection from mosquito to human.\n\\(T_{HM} \\times \\frac{b}{N_H}\\)\n\n\n\n2.5 Write the expression for the number of bites a single human receives from a single mosquito per unit time that are capable of transmitting infection from human to mosquito.\n\\(T_{MH} \\times \\frac{b}{N_H}\\)\n\n\n\n\n\nForce of infection on humans \\((λ_H)\\) and on mosquitoes \\((λ_M)\\)\nThe expressions in 2.4 and 2.5 are for the rate of ‘successful’ bites between a single susceptible human and a single infectious mosquito. The force of infection on humans, \\(λ_H\\), is the rate at which a susceptible human acquires infection, noting that infection can be acquired from any infectious mosquito.\n2.6 Write the expression for the force of infection on humans, \\(\\lambda_H\\).\n\\(T_{HM} \\times \\frac{b}{N_H} \\times I_M\\)\n\n\n\nSimilarly the force of infection on mosquitoes, \\(λ_M\\), is the rate at which a susceptible mosquito acquires infection. A mosquito can acquire infection from any infectious human.\n2.7 Write the expression for the force of infection on mosquitoes, \\(λ_M\\).\n\\(T_{MH} \\times \\frac{b}{N_H} \\times I_H\\)\n\n\n\n\n\nNew infections per unit time\nThe force of infection (on humans or mosquitoes) is the rate at which infection is acquired in a single susceptible host. To calculate the rate that new infections occur in the whole human or mosquito population, we have to multiply the force of infection by the population at risk of being infected.\n2.8 Using the equation for the force of infection on humans, \\(λ_H\\), write the expression for the total number of human infections per unit time.\n\\(T_{HM} \\times \\frac{b}{N_H} \\times I_M \\times S_H\\)\n\n\n\n2.9 Using the equation for the force of infection on mosquitoes, \\(λ_M\\), write the expression for the total number of mosquito infections per unit time.\n\\(T_{MH} \\times \\frac{b}{N_H} \\times I_H \\times S_M\\)\n\n\n\n\n\nBirths and deaths\n\nTypically the demographic processes of mosquitoes (births, deaths) occur on a much shorter time scale than the same processes for humans — mosquitoes may live a few weeks whereas humans live for decades.\nDepending on the time over which the model will be run to answer the research question, it is common for mosquito births and deaths to be included in a model while human births and deaths are omitted.\nTo maintain a constant population in a model, we set the birth rates and the death rates to be equal.\nIn the model we are building in this session, we will ignore human births and deaths and maintain a constant mosquito population.\nIn the model we are building in this session, all new members of the population are born susceptible to the modelled disease.\n\n\n\nOther modelling considerations\n\nMany of the processes affecting the life cycle of mosquitoes are highly climate dependent and so vary seasonally. For the purposes of illustration, we will not include seasonality in our model.\nAs we saw when we compared the transmission cycle for onchocerciasis with the transmission cycle of West Nile virus, for some vector-borne diseases vertebrate hosts other than humans are involved. As this adds substantial complexity to the model, in this session we consider only diseases that spread human-vector-human.\nWhile we have assumed a constant probability across the whole population that a bite will result in transmission, in reality this may not be the case due to population heterogeneity. Comparing the force of infection measured in humans to the measured entomological inoculation rate (EIR), which is the average number of infectious bites per human per unit time, can help calibrate models to real data.",
    "crumbs": [
      "Vector-borne disease modelling"
    ]
  },
  {
    "objectID": "session7_vector_borne_modelling/session7_vector_borne_modelling.html#part-3-writing-the-model",
    "href": "session7_vector_borne_modelling/session7_vector_borne_modelling.html#part-3-writing-the-model",
    "title": "Vector-borne disease modelling",
    "section": "Part 3: Writing the model",
    "text": "Part 3: Writing the model\n\nModel Diagram\nNow that we have explored how the human and mosquito populations interact in a vector-borne disease model and made some assumptions around what to include in our first model, we will design an appropriate model structure. Using the model compartments you identified in Part 2, and the inflows and outflows from each compartment required based on the assumptions discussed in Part 2, draw your proposed model structure.\nInstructions:\n\nYou can draw a diagram electronically in a program such as PowerPoint, or you can draw your diagram by hand and take a photo\nMake sure you label all compartments as well as the inflows and outflows from each compartment.\nSave your diagram in one of the following formats: .jpg, .gif, .png\nUpload your diagram using the Browse… button below\nIf you prefer, you can describe your model in words in the space below\n\nNB: You can replace a file by clicking on the file name and selecting a file with a different name.\n\n\nUpload your image\n\n \n\n\n\n\n\nAlternatively, describe your model structure here\n\n\n\n\n\n\nModel equations\n3.1 For your model, write in words the inflows and outflows from each compartment.\n\n\n\n\n3.2 Convert your description of the model inflows and outflows into the differential equations for your model.\n\n\n\n\n3.3 Write the equations for the size of each population in your model.\n\n\n\n\n\n\nBasic reproduction number\nThe basic reproduction number, \\(R_0\\), for a vector-borne disease is the number of secondary infections of the same type (i.e. vector or human) generated by a single infectious vector or human in a totally susceptible population. Let’s start with a single infectious mosquito.\nWe firstly start with the expected number of humans (in a totally susceptible population) infected by this mosquito over the duration of their infectious period.\n3.4 Write down this expression using the information you have developed in Parts 2 and 3 (i.e. number of new infections and the duration of the infectious period). We will denote this as \\(R_{HM}\\).\n\n\n\n\nNext we consider the expected number of mosquitoes (in a totally susceptible population) infected by a single human over the duration of their infectious period.\n3.5 Write down this expression using the information you have developed in Parts 2 and 3 (i.e. number of new infections and the duration of the infectious period). We will denote this as \\(R_{MH}\\).\n\n\n\n\nSince a single mosquito infects \\(R_{HM}\\) humans, and each of these humans infects \\(R_{MH}\\) mosquitoes, the number of secondary infections a mosquito generates in mosquitoes is the product of \\(R_{HM}\\) and \\(R_{MH}\\).\n3.6 Write down this expression, cancelling terms where possible to simplify the expression.\n\n\n\n\n3.7 What happens to \\(R_0\\) as the number of mosquitoes increases? Why?\n\n\n\n\n3.8 What happens to \\(R_0\\) as the number of humans increases? Why?\n\n\n\n\n3.9 Depending on the season, mosquitoes may have a reduced life expectancy. What happens to \\(R_0\\) as the life expectancy of mosquitoes reduces? Why?",
    "crumbs": [
      "Vector-borne disease modelling"
    ]
  },
  {
    "objectID": "session7_vector_borne_modelling/session7_vector_borne_modelling.html#part-3-solutions",
    "href": "session7_vector_borne_modelling/session7_vector_borne_modelling.html#part-3-solutions",
    "title": "Vector-borne disease modelling",
    "section": "Part 3: Solutions",
    "text": "Part 3: Solutions\n\nPart 3: Spoiler alertPart 3: Solutions for Part 3\n\n\nThe solutions tab contains solutions for Part 3. Only click on it if you have tried to complete the exercises yourself and need some help\n\n\n\nModel Diagram\nNow that we have explored how the human and mosquito populations interact in a vector-borne disease model and made some assumptions around what to include in our first model, we will design an appropriate model structure. Using the model compartments you identified in Part 2, and the inflows and outflows from each compartment required based on the assumptions discussed in Part 2, draw your proposed model structure.\nInstructions:\n\nYou can draw a diagram electronically in a program such as PowerPoint, or you can draw your diagram by hand and take a photo\nMake sure you label all compartments as well as the inflows and outflows from each compartment.\nSave your diagram in one of the following formats: .jpg, .gif, .png\nUpload your diagram using the Browse… button below\nIf you prefer, you can describe your model in words in the space below\n\nNB: You can replace a file by clicking on the file name and selecting a file with a different name.\n\n\nUpload your image\n\n \n\n\n\n\n\nAlternatively, describe your model structure here\nSIR for humans, SI for mosquitoes. Force of infection on humans from mosquitoes and Force of infection on mosquitoes from humans.\n\n\n\n\n\nModel equations\n3.1 For your model, write in words the inflows and outflows from each compartment.\nChange in \\(S_H=-\\) new infections in humans Change in \\(I_H=\\) new infections in humans \\(-\\) recoveries in humans Change in \\(R_H=\\) recoveries in humans Change in \\(S_M=-\\) new infections in mosquitoes + mosquitoes born \\(-\\) susceptible mosquitoes died Change in \\(I_M=\\) new infections in mosquitoes \\(-\\) infectious mosquitoes died\n\n\n\n3.2 Convert your description of the model inflows and outflows into the differential equations for your model.\n\\(\\frac{dS_H}{dt} = - T_{HM} \\times \\frac{b}{N_H} \\times I_M \\times S_H\\) \\(\\frac{dI_H}{dt} =   T_{HM} \\times \\frac{b}{N_H} \\times I_M \\times S_H - \\gamma I_H\\) \\(\\frac{dR_H}{dt} = \\gamma I_H\\)\nwhere \\(\\gamma\\) is the reciprocal of the duration of infectiousness\n\\(\\frac{dS_M}{dt} = - T_{MH} \\times \\frac{b}{N_H} \\times I_H \\times S_M + \\mu N_M - \\mu S_M\\) \\(\\frac{dI_M}{dt} =   T_{MH} \\times \\frac{b}{N_H} \\times I_H \\times S_M - \\mu I_M\\)\nwhere \\(\\mu\\) is mosquito birth and death rate\n\n\n\n3.3 Write the equations for the size of each population in your model.\n\\(N_H = S_H + I_H + R_H\\) \\(N_M = S_M + I_M\\)\n\n\n\n\n\nBasic reproduction number\nThe basic reproduction number, \\(R_0\\), for a vector-borne disease is the number of secondary infections of the same type (i.e. vector or human) generated by a single infectious vector or human in a totally susceptible population. Let’s start with a single infectious mosquito.\nWe firstly start with the expected number of humans (in a totally susceptible population) infected by this mosquito over the duration of their infectious period.\n3.4 Write down this expression using the information you have developed in Parts 2 and 3 (i.e. number of new infections and the duration of the infectious period). We will denote this as \\(R_{HM}\\).\n\\(I_M=1, \\frac{S_H}{N_H}\\approx 1\\) \\(R_{HM} = T_{HM} \\times \\frac{b}{N_H} \\times I_M \\times S_H \\times \\frac{1}{\\mu}\\) \\(R_{HM} = T_{HM} \\times b \\times I_M \\times \\frac{S_H}{N_H} \\times \\frac{1}{\\mu}\\) \\(R_{HM} = T_{HM} \\times b \\times 1 \\times 1 \\times \\frac{1}{\\mu}\\) \\(R_{HM} = b \\times T_{HM} \\times \\frac{1}{\\mu}\\)\n\n\n\nNext we consider the expected number of mosquitoes (in a totally susceptible population) infected by a single human over the duration of their infectious period.\n3.5 Write down this expression using the information you have developed in Parts 2 and 3 (i.e. number of new infections and the duration of the infectious period). We will denote this as \\(R_{MH}\\).\n\\(I_H=1, S_M\\approx N_M\\) \\(R_{MH} = T_{MH} \\times \\frac{b}{N_H} \\times I_H \\times S_M \\times \\frac{1}{\\gamma}\\) \\(R_{MH} = T_{MH} \\times \\frac{b}{N_H} \\times 1 \\times N_M \\times \\frac{1}{\\gamma}\\) \\(R_{MH} = b \\times T_{MH} \\times \\frac{N_M}{N_H} \\times \\frac{1}{\\gamma}\\)\n\n\n\nSince a single mosquito infects \\(R_{HM}\\) humans, and each of these humans infects \\(R_{MH}\\) mosquitoes, the number of secondary infections a mosquito generates in mosquitoes is the product of \\(R_{HM}\\) and \\(R_{MH}\\).\n3.6 Write down this expression, cancelling terms where possible to simplify the expression.\n\\(R_{HM} \\times R_{MH} = b \\times T_{HM} \\times \\frac{1}{\\mu} \\times b \\times T_{MH} \\times \\frac{N_M}{N_H} \\times \\frac{1}{\\gamma}\\) \\(R_{HM} \\times R_{MH} = b^2 \\times T_{HM} \\times T_{MH} \\times \\frac{N_M}{N_H} \\times \\frac{1}{\\mu \\times \\gamma}\\)\n\n\n\n3.7 What happens to \\(R_0\\) as the number of mosquitoes increases? Why?\n\\(R_{MH} \\times R_{HM}\\) is \\(R_0\\) for vector borne models \\(R_0\\) increases as \\(N_M\\) increases, because as the susceptible mosquito population is larger, the infectious human will be bitten by more mosquitoes and pass infection to them\n\n\n\n3.8 What happens to \\(R_0\\) as the number of humans increases? Why?\n\\(R_0\\) decreases, because the fixed number of bites from a mosquito are now spread over a larger population, so each human is bitten less, limiting their ability to pass infection on.\n\n\n\n3.9 Depending on the season, mosquitoes may have a reduced life expectancy. What happens to \\(R_0\\) as the life expectancy of mosquitoes reduces? Why?\n\\(R_0\\) decreases because mosquitoes have a shorter amount of time over which they are able to bite humans.",
    "crumbs": [
      "Vector-borne disease modelling"
    ]
  },
  {
    "objectID": "InfectiousDiseasesCourse.html#quarto",
    "href": "InfectiousDiseasesCourse.html#quarto",
    "title": "InfectiousDiseasesCourse",
    "section": "Quarto",
    "text": "Quarto\nQuarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "session3_writing_a_model_to_suit_the_infectious_agent/session3_writing_a_model_to_suit_the_infectious_agent.html",
    "href": "session3_writing_a_model_to_suit_the_infectious_agent/session3_writing_a_model_to_suit_the_infectious_agent.html",
    "title": "Designing a model to suit the pathogen",
    "section": "",
    "text": "SPARK short course ‘Mathematical Modelling of Infectious Diseases’, Indonesia, March 2023\nThanks to Lisa White, Nuffield Department of Medicine, Oxford University and\nWirichada Pan-Ngum, Department of Tropical Hygiene, Faculty of Tropical Medicine, Mahidol University.\nAdapted and presented by Emma McBryde, Australian Institute of Tropical Health & Medicine, James Cook University July 2022\nAdapted and presented by Roslyn Hickson, College of Public Health, Medical and Veterinary Sciences, and Australian Institute of Tropical Health & Medicine, James Cook University (and CSIRO) March 2023",
    "crumbs": [
      "Designing a model to suit the pathogen"
    ]
  },
  {
    "objectID": "session3_writing_a_model_to_suit_the_infectious_agent/session3_writing_a_model_to_suit_the_infectious_agent.html#more-practice",
    "href": "session3_writing_a_model_to_suit_the_infectious_agent/session3_writing_a_model_to_suit_the_infectious_agent.html#more-practice",
    "title": "Designing a model to suit the pathogen",
    "section": "More practice",
    "text": "More practice\n\nRepeat this process for measles, a short-lived disease with lifelong immunity.\n\nYou might find the following diagram helpful: \nUpload your model diagram:",
    "crumbs": [
      "Designing a model to suit the pathogen"
    ]
  },
  {
    "objectID": "session3_writing_a_model_to_suit_the_infectious_agent/session3_writing_a_model_to_suit_the_infectious_agent.html#examine-the-graphs-that-plot-s-e-i-and-r-over-time-for-the-default-parameters.",
    "href": "session3_writing_a_model_to_suit_the_infectious_agent/session3_writing_a_model_to_suit_the_infectious_agent.html#examine-the-graphs-that-plot-s-e-i-and-r-over-time-for-the-default-parameters.",
    "title": "Designing a model to suit the pathogen",
    "section": "Examine the graphs that plot S, E, I and R over time for the default parameters.",
    "text": "Examine the graphs that plot S, E, I and R over time for the default parameters.\n\nWhat kind of model is it?\n\n\nChange the parameter for the basic reproduction number. What impact does this have on:\n\nThe duration of the epidemic?\n\nThe peak of infectious cases?\n\nThe final proportion of susceptibles?\n\n\nChange the parameter for latency duration. What impact does this have on:\n\nThe duration of the epidemic?\n\nThe peak of infectious cases?\n\nThe final proportion of susceptibles?\n\n\nReduce the duration of immunity.\n\nWhat type of model have we now created?\n\nHow does this impact on the number of susceptibles after a long time?\n\nHow does this impact on the number of infectious after a long time?\n\nWhy does the model have waves?\n\n\nExamine the phase plane.\n\nWhat is it showing?\n\nWhere is time on the phase plane?\n\nWhat corresponds to the waves in the phase plane?\n\n\nContinue to change the parameters to try and simulate the different model types such as those pictured below.",
    "crumbs": [
      "Designing a model to suit the pathogen"
    ]
  }
]